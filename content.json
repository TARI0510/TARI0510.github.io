{"meta":{"title":"TARI TARI","subtitle":"","description":"","author":"TARI TARI","url":"https://tari0510.github.io","root":"/"},"pages":[{"title":"","date":"2021-04-01T02:48:42.200Z","updated":"2021-04-01T02:48:42.200Z","comments":true,"path":"404.html","permalink":"https://tari0510.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有标签","date":"2021-04-01T02:44:50.837Z","updated":"2021-04-01T02:44:50.837Z","comments":true,"path":"tags/index.html","permalink":"https://tari0510.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-04-01T02:53:05.405Z","updated":"2021-04-01T02:53:05.405Z","comments":true,"path":"about/index.html","permalink":"https://tari0510.github.io/about/index.html","excerpt":"","text":"博客仅用于个人记录 ~"},{"title":"我滴朋友们","date":"2021-04-01T07:30:59.293Z","updated":"2021-04-01T07:30:59.293Z","comments":true,"path":"friends/index.html","permalink":"https://tari0510.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"Wireshark入门与实战","slug":"Wireshark入门与实战","date":"2021-04-01T13:13:59.000Z","updated":"2021-04-01T13:38:40.912Z","comments":true,"path":"2021/04/01/Wireshark入门与实战/","link":"","permalink":"https://tari0510.github.io/2021/04/01/Wireshark%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/","excerpt":"","text":"wireshark入门: https://www.bilibili.com/video/BV1X5411x7R4他这里顺序有点误，应该是 P1-P26，P32-P39，P27-P31 Wireshark 入门伯克利包过滤 - Wireshark包过滤BPF（Berkeley Packet Filter） 采用与自然语言相近的语法，利用语法构造字符串确定保留具体符合规则的数据包而忽略其他数据包 最简单语法空白字符，任何数据包都符合空白字符规则 语法规则 type表示对象 如 IP地址、子网或端口 -&gt; host、net、port dir 表示数据包传输的方向 -&gt; src、dst proto 表示与数据包匹配的协议类型 -&gt; ether、ip、tcp、arp 演示实例会发现直接在 Apply a display filter 里输入是无法过滤的， 新版的 wireshark 的 expression 功能在如下图所示这里在 wireshark 里，不是直接使用 host 来表示主机名和对应的 ip 地址，而是使用 ip.addr = &lt;ip&gt; 来表示其他也是类似，如 ip.src 和 ip.dst 在找服务这一块，服务都是以占用端口的形式展示的，因此可以通过这种形式来看怎么用，然后点OK即可。 也可以使用 逻辑运算符实现筛选，如 tcp.port == 80 and ip.src == 192.168.123.37当然也有类似补全的操作 wireshark包过滤器分类 - 遵循伯克利语法规则捕获过滤器 -&gt; 在抓包之前进行设置，在抓取时，就不会抓取不符合文件的数据包 只捕获目标端口为80的TCP数据包 -&gt; tcp dst port 80 捕获目的主机IP地址为 192.168.123.37 的数据包 -&gt; dst host 192.168.123.37 host 不支持 cidr 域名 书写 筛选过滤器 （显示过滤器）-&gt; 抓包之后进行应用的，即再次筛选然后显示过滤器有两种创建方式 输入框创建 当不知道如何创建就看下图这里 数据包细节面板创建 ... and Selected 表示 目前的过滤器 + and 进行连接一开始是只有 Selected 和 Not Selected 的 表达式规则 主题 + 运算符 + 值 逻辑关系 与 或 非 -&gt; and (&amp;&amp;) or (||) not (!) Wireshark 捕获数据包文件保存 杂项设置wireshark 数据包颜色的意思可以通过 视图 -&gt; 着色规则进行查看 wireshark 故障包过滤有5个等级 Error 严重错误，譬如：畸形数据包或识别出数据包协议头部的某些字段和预期值不符 Warning 一般性问题（应用程序问题或通信问题），譬如：TCP zero window ,TCP window full ,TCP报文段失序，TCP报文段丢失 Note 可能引发故障的异常现象（正常行为），譬如：TCP重传，重复确认，快速重传 Chat 符合常规流量的特征，譬如：SYN,FIN,RST Comment OK 123_ws.expert.severity &lt;&#x3D; Note或者_ws.expert.severity &lt;&#x3D; Chat 查看wireshark 内置文件路径 修改wireshark默认配置 Wireshark 网络分析# Wireshark 部署方式 远程数据包捕获方式1:开启远程桌面，rdp服务，在系统中安装wireshark进行抓包分析缺点: 在于远程登录过程中，都会产生无关与目的远程连接数据流量 方式2: wireshark 远程抓包windows服务端: winpcap -&gt; rpcapd 12cd &quot;C:\\Program Files (x86)\\WinPcap\\&quot;.\\rpcapd.exe -n 客户端: wireshark linuxmacos注意 macos 版本没有直接抓取数据包的功能，可参考https://distanceblog.github.io/2020/06/05/wireshark%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8C%85/ 本地数据包捕获wireshark 不能抓取本地环回网卡数据包不过可以使用 RawCaphttps://www.netresec.com/?page=RawCap 12# cmdRawCap.exe 然后浏览器访问 localhost 不过可以通过访问本机 ip 代替 localhost 间接捉取数据包（狗头 虚拟机数据包捕获选择对应网卡即可。。。 比如在 kali 上运行 1sudo netdiscover -r 192.168.18.1/24 哈哈哈哈，原来arp广播还真就这么直白，，Who has ….? Tell …（netdiscover 还真直白 ARP欺骗捕获数据包攻击原则 任何主机均能发送伪造包给局域网中的另一主机； 任一主机相信它们接受到的所有包； 当一个新的响应包到达时，它甚至在没有请求包被发送的情况下覆盖掉旧的记录。 实践kali 一般要先安装 1sudo apt install dsniff kali 上运行 123sudo arpspoof -i eth0 -t &lt;欺骗的目标&gt; &lt;我是谁&gt;# 如sudo arpspoof -i eth0 -t 192.168.123.37 192.168.123.1 然后此时在 192.168.123.37 这台机器上wireshark 选择网卡 eth0，因为是欺骗这一张网卡，wireshark 筛选过滤器填入 icmp 查看 12# 然后在 192.168.123.37 上 ping 网关ping 192.168.123.1 会发现 192.168.123.1 的 mac 地址是 kali的。。。所以在 192.168.123.37 上是上不了网的，除非kali上开启了数据包转发，当 ip_forward 为 0 时，欺骗的目标 上不了网，当该值为 1 时，会把192.168.123.37发送的数据包做转发给网关，就可以正常上网，但是192.168.123.37的数据包都会经过 kali。 Wireshark 网络安全链路层安全针对于交换机的安全问题MAC对称欺骗 —— macchange擦除只是暂时的，不是覆盖原来的mac地址，机器重启后就会恢复。通过MAC地址欺骗达到隐藏真实主机的目的 12345678-e 改变的是后三字节，即不改变生产厂商-a 同一类型的随机供应商地址 ( macchanger --list=Huawei 就是同一类型 )-A 随机厂商随机地址-p 永久修改-r 完全随机-l 查看支持的厂商-b-m 设置前需要关闭网卡 12345sudo ifconfig eth0 down# -m 不能自己完全随意起，如果前三字节不符合 mac 地址命名规范会报错# [ERROR] Could not change MAC: interface up or insufficient permissions: Cannot assign requested addresssudo macchanger -m 00:90:d1:33:33:33 eth0sudo ifconfig eth0 up 随机化设置 1sudo macchanger -r eth0 MAC地址泛洪分析 —— 溢出交换机CAM表交换机之所以可以交换数据，是因为交换机在内存中维护着一张CAM表，即 端口 &lt;-&gt; MAC地址当表被添满时，其他主机就无法在对应的端口正常交互数据 12345sudo macof -h# -x 源端口 -y 目的端口# 泛洪sudo macof -i eth0 wireshark 抓包分析因为实际中，主要数据包类型是 tcp 或 udp下面只有 ip 数据包，因此很可能有问题（当然有问题，哈哈很多无关的 ip 以及 mac地址，数据包很小 查找源头端口交换机 1display mac-address 找到对应的端口 防御策略限制交换机端口 MAC 地址数量，比如这个端口只能有3或5个，那他就只能添加3或5跳记录到CAM表，那么就无法溢出啦。 STP操纵生成树协议按照树的结构构造网络拓扑，避免形成回路。STP协议中的各交换机通过交换BPDU报文信息传播生成树信息，如果伪造BPDU报文，控制交换机的端口转发状态，从而动态改变网络拓扑，劫持网络流量到本地。 广播风暴ARP DHCP 通过在局域网中广播，占用网络资源，网络性能下降 -&gt; 网络速度变慢产生原因 网络短路引发广播风暴 -&gt; 8根连接 两两连接 -&gt; 互联网上网线导致网络性能下降 网络中存在环路引发广播风暴 网卡损坏引发广播风暴 蠕虫病毒引发广播风暴 网络层安全中间人安全测试 - 欺骗ARP协议 局域网内用来寻找主机发送数据包的协议，通过它可以找到指定 IP 地址对应的 MAC地址 每台终端设备都具有ARP缓存表 arp -a 查看缓存表 arp -d 删除缓存表 表的填充，寻找 IP 地址对应MAC地址，如果没有则广播此时设置的目标MAC地址为 (00:00:00:00:00:00) 是否具有IP地址对应的MAC地址，找到填充。 ARP协议分析介绍显示过滤器 arp 请求数据包 arp.opcode == 0x0001 响应数据包 arp.opcode == 0x0002 查看源 MAC 地址 arp.src.hw_mac == 00:00:00:00:00:00 arp.src.hw_mac == 00:00:00:00:00:00 &amp;&amp; arp.opcode == 0x0002 专家系统分析网关地址与局域网中的计算机具有一致的MAC地址 出现大量ARP数据包的原因 ARP主机扫描 ARP病毒进行通信 ARP欺骗 中间人安全测试 防御ARP欺骗措施 静态绑定ARP表 arp -s 网关的IP地址 网关的MAC地址 不适合大型网络使用 需要管理员权限 win netsh i i show in -&gt; 查看网卡编号 win netsh -c &quot;i i&quot; add neighbors &lt;网卡编号&gt; &lt;网关IP地址&gt; &lt;网关MAC地址&gt; - 验证是否静态绑定 `arp -a` 交换机也有端口安全配置，固定MAC和IP使用端口 不适合大型网络使用 交换机 DHCP-Snooping 交换机监听DHCP数据，提取IP和MAC建立DHCP Snooping的绑定表 划分VLAN 每一个VLAN就是一个广播域 -&gt; 限制网络范围 泪滴安全测试原理介绍 针对于IP协议的安全测试，主要是伪造IP地址和发送畸形数据包 向目标发送畸形数据包，使得IP数据包碎片在重组的过程中有重合的部分（偏移位置不够），从而导致目标系统无法进行重组，进一步导致系统奔溃而停止服务。 下载IP协议案例数据包: https://wiki.wireshark.org/SampleCaptures?action=AttachFile&amp;do=get&amp;target=teardrop.cap 根据数据包表示 Identification 来确实是否属于同一分组 分析 第8和第9个数据包偏移量仅为 24，远不够36。因此无法重组 不过对现在的计算机来说，泪滴测试不会对计算机造成很大的影响，所以基本不关心泪滴安全测试了。不够泪滴测试和ARP泛洪结合，还是能对计算机造成很大的困扰。 传输层安全传输层主要针对TCP和UDP协议，因此拒绝服务DOS（Denial of Service）也主要是基于这两个协议 TCP SYN 泛洪TCP连接介绍 客户端发送SYN到服务器 服务器响应 SYN+ACK 到客户机 客户机发送ACK到服务器 使用 wireshark 分析 TCP 三次握手数据包 TCP SYN flooding 安全测试原理 客户端发送syn服务端返回syn+ack，如果客户端不再发送ack，那么服务端将等待超时，重新发送syn+ack。如果是大量的等待，就可能导致服务器奔溃。 案例演示 1hping3 -q -n --rand-source -S -p 80 --flood &lt;目标IP地址&gt; -q: 安静模式 -n: 数字化输出，象征性输出主机地址 –rand-source: 随机源IP -S: 发送SYN数据包 -p: 指向端口 –flood: 使用泛洪 为了便于分析。打开 Statistics -&gt; Flow Graph先选择流类型为TCP发现客户端发送syn服务端返回syn+ack，但客户端不再发送ack，导致资源消耗。 TCP SYN flooding安全防御 丢弃第一个SYN数据包 -&gt; 用户体验差 反向探测 -&gt; 向源地址方向发送探测包，确定源地址合法性 代理模式 -&gt; 防火墙代理 -&gt; 即先与防火墙建立tcp连接 UDP 泛洪非连接状态的协议，简洁协议，控制选项少，不可靠，传输速率高，适合大文件传输 UDP协议关键点 源端口 目的端口 UDP报文长度 检验码 UDP flooding 安全测试原理: 测试人员向目标发送大量巨大的UDP数据包，就会使网络资源被耗尽 1sudo hping3 -q -n -a &lt;fake_ip&gt; --udp -s 53 -p &lt;dst_port&gt; --flood &lt;target_ip&gt; -d 1000 -a: 伪造的 ip-s: 53端口 UDP flooding 安全防御防火墙 限流: 将链路中的UDP报文控制在合理的范围，当超过指定值，则丢弃UDP报文 指纹学习: 先学习，在匹配 网络取证简析wireshark 恢复传输文件无论使用何种应用层协议，对于传输层来说都是TCP或UDP协议，来恢复一下wireshark官网提供的文件https://wiki.wireshark.org/SampleCaptures?action=AttachFile&amp;do=view&amp;target=http_with_jpegs.cap.gzhttp_with_jpegs.cap.gz 首先在显示过滤器中筛选具有jpeg内容的数据包: http contains &quot;jpeg&quot;选第一个，追踪tcp流最后点一下 Save as… 保存为 xxx.bin 就好，然后用16进制编辑器打开，JPEG的文件开始字节为 FF D8，文件结束字节为 FF D9然后把其余没用的都删除掉，这里因为结束符号就是最后了，因此把上图 FF D8 之前的都删除掉就好了。成功恢复。 取证实践案例https://forensicscontest.com/2009/09/25/puzzle-1-anns-bad-aim好像没了。。。然后在Github找了个: https://github.com/aarud/Pcaps/blob/master/evidence01.pcap 1.寻找Ann的通信好友名称根据题目名称提示 aim 通信，wireshark 自带 aim 解密这三项依次改为然后查看数据包，发现通信好友名称是 Sec558user1 2. 通信过程中的第一条信息内容是什么 3. Ann 通信过程中传输的文件名字显示过滤器输入 data，然后追踪tcp流文件名字 4. 还原Ann发送文件并得出文件幻数（magic number）文件幻数介绍: https://baike.baidu.com/item/magic%20number说直白点就是以 zip 之父的首字母PK来命名，对应的16进制是50 4B 03 0450(P)4B(K)03(文本结束)04(传输结束)，组合起来就是压缩包的标识开头。那为啥word文档的文件开头是这个，把word文档后缀改为.zip试试，这是微软2006年公布的OOXML规范。 显示过滤器输入 data，然后追踪tcp流另存为，xxx.bin，用16进制编辑器打开xxx.bin 5. 查看文件md5值 应用层网络安全暴力破解分析分析使用 medusa 破解 ssh 登录 后门分析某些软件具有其他的目的 -&gt; 设置隐藏后门这里针对vsftpd 2.3.4 后门帐号密码不要紧，有 :) 笑脸就行，因此这个后门也被称为笑脸后门，2333","categories":[],"tags":[{"name":"Wireshark 流量分析","slug":"Wireshark-流量分析","permalink":"https://tari0510.github.io/tags/Wireshark-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"}]},{"title":"=======总结 & 手动分割线=======","slug":"手动分割线","date":"2021-04-01T10:40:39.000Z","updated":"2021-04-01T13:12:45.997Z","comments":true,"path":"2021/04/01/手动分割线/","link":"","permalink":"https://tari0510.github.io/2021/04/01/%E6%89%8B%E5%8A%A8%E5%88%86%E5%89%B2%E7%BA%BF/","excerpt":"","text":"由于 notion 和 语雀 使用起来过于舒适，差点忘了自己还有个博客，直到 （逃 上次写博客还是大三上学期末，现在都差不多要毕业了。大二大三那会，在学校啥都干，从之前的文章也能看出，服务器运维、开发、CTF…. 顺便做个总结，这一年虽没写博客，不过找了两份实习，一个是做渗透测试、一个是安全攻防研究，还有学校各种各样的事情，好像上次跑 hexo d 还是不久之前（主要是被 notion 和 语雀 惯懒了）… 2020.4 - 2020.10 渗透测试实习生，算是正式入门网安吧…感谢组内大佬肯收留我个菜鸡，哈哈，一开始还很纠结，以后是做安全还是运维，所以各投了一份实习（刚过完年做师兄的疯狂安利下），面试和准备，发现还是对网安更敢兴趣一些~，所以选了网安。不过现在偶尔会想，要是当初我选了另外一个实习，现在会怎样？（毕竟两边面试都过了），实习过程中被各种带飞，认识了几个大佬，其中的项目经验，都给秋招打下了基础。 2020.10 - 2020.12 学校项目，模仿大佬的开源项目，结合深度学习和网安和同学一起做了个《基于A2C和MSF的自适应渗透测试工具》，作为代码和文档的主要贡献者，虽然没做到想象中效果，不过也是第一次尝试去学习和改动大佬的开源项目。虽然功能上没能做的很好（不过还是做了许多的不错的优化），但是以后对开源项目都不会有那种陌生的隔离感了（就这个语言学过，也写过项目，但看着大佬写的就是有点抽象） 2020.11 - 2021.3 安全攻防研究实习生，第一次在大型项目中技术上承担一定角色，挑战很大，过了一个月才习惯这些工作，之前实习主要是渗透，这次还有很多代码审计、尤其是hvv相关的，代码审计任务很繁重，平均一天要审个6000+行代码（而且还是各种语言，有的压根就不怎么熟悉…）。也做了很多尝试，比如威胁建模评审，安全红线落实等，也是第一次接触SDL，也由此知道为啥大厂核心业务漏洞会难挖，毕竟别人都有做SDL流程。当然除此之外，由于我们部门很看重产出，所以这次实习也没上次实习那么轻松。特别是我这个产品线，迭代了很多代，漏洞特别难挖，而且渗透也比较麻烦，因为环境比较复杂，没有在搞站那会随随便便抓个包改改参数那么舒服了~ 当然产出不仅仅是挖洞，还可以有安全研究分享，输出文档等等等等~ 总之就是从之前各种打杂到现在会稍微专注于一个方向，所以成长也挺快的，虽然还是很菜（x，其实主要还是被各种大佬带飞，少走了一些坑 （ 今年，虽然过年很久了，先立一些 flag 吧~，毕竟实习了两次，发现一些东西需要补补了 SDL，把实习学的做个总结并做一些拓展 云安全，先把威胁建模学个差不多，然后熟悉一波主流的云基础框架，毕竟工作要用到 二进制，常见漏洞点和利用方式要掌握，感觉熟悉二进制以后审计C/C++会舒服不少 代码审计，把白嫖过来的CTFSHOW入门大部分给刷完，巩固一波基础~ 迟些会把一些正常点的笔记放上来，2333","categories":[],"tags":[{"name":"小记","slug":"小记","permalink":"https://tari0510.github.io/tags/%E5%B0%8F%E8%AE%B0/"}]},{"title":"django踩坑记","slug":"django踩坑记","date":"2020-01-02T00:50:23.000Z","updated":"2021-04-01T08:28:13.852Z","comments":true,"path":"2020/01/02/django踩坑记/","link":"","permalink":"https://tari0510.github.io/2020/01/02/django%E8%B8%A9%E5%9D%91%E8%AE%B0/","excerpt":"","text":"python 虚拟环境pip install virtualenvpip install virtualenvwrapper-win # windows 使用此命令 好处,：可以一个环境对应一个项目 闭包一直好奇闭包有什么用，直到学了 django 后的登录装饰器 闭包的应用：装饰器、面向对象 1234567891011121314151617181920&quot;&quot;&quot;装饰器的应用如果需要统计一个函数运行的时间，加上装饰器即可，可简化代码&quot;&quot;&quot; import timedef func_timer(func): def wrapper(): start_time = time.time() func() print(time.time() - start_time) return wrapper@func_timerdef login(): print(&#x27;login success!&#x27;)login() 跨域问题在与 setting.py 同级目录新建一个 py 文件。写入如下代码 123456789from django.utils.deprecation import MiddlewareMixinclass SolveCrossDomainMiddleware(MiddlewareMixin): def process_response(self, request, response): response[&quot;Access-Control-Allow-Credentials&quot;] = &quot;true&quot; response[&quot;Access-Control-Allow-Origin&quot;] = &quot;http://192.168.123.60:8080&quot; response[&quot;Access-Control-Allow-Methods&quot;] = [&quot;GET&quot;, &quot;POST&quot;] return response 如下图所示 在 settingpy 的 MIDDLEWARE 引入， webproject 与自己的项目名字对应， 1&#x27;webproject.solveCrossDomain.SolveCrossDomainMiddleware&#x27;, 如下图所示 即可解决跨域问题，因为 SolveCrossDomainMiddleware 中已经对 request 和 response 做了处理了 session 跨域问题因为我使用的是 Vue.js + django 前后端分离，因此需要解决 session 跨域问题 Vue 里加入 (因为我使用的是 axios1this.$axios.defaults.withCredentials = true 如下图所示 以下为 django 里的操作我使用的是 数据库存储 session， 因此 setting.py 引入的是 123456789101112131415161718MIDDLEWARE = [...&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,...]SESSION_ENGINE = &#x27;django.contrib.sessions.backends.db&#x27; # 引擎（默认）SESSION_COOKIE_NAME = &quot;sessionid&quot; # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）SESSION_COOKIE_PATH = &quot;/&quot; # Session的cookie保存的路径（默认）SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认）SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认）SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认）SESSION_COOKIE_AGE = 3600 # Session的cookie失效日期（默认2周）SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认）SESSION_SAVE_EVERY_REQUEST = False # 是否每次请求都保存Session，默认修改之后才保存（默认）# !!! 这个一定要加.....SESSION_COOKIE_SAMESITE = None # 默认为 Lax, 即 get 可跨域, 而 post 不可以 如下图红线区所示 在 Vue.js 前端引入 migrate 无报错，迁移后数据库没有增加表我是手动直接删除了 migrations 里面的文件和数据库里面的表格，，然后我改了 models.py 后 makemigrations &amp;&amp; migrate 数据库竟然没有多出表。 原来 django 数据库里面，是有这个表格的 里面存放着关于数据库迁移的信息，所以我手动删除了迁移表和数据后并没有什么乱用，数据库以为它还是在的，，所以，我选择了删除所以表格，，重新 makemigrations &amp;&amp; migrate 就好了。 因为这是个人作业，，所以随便删了，生产环境慎用。。。**","categories":[],"tags":[{"name":"daily","slug":"daily","permalink":"https://tari0510.github.io/tags/daily/"}]},{"title":"计算智能实验","slug":"计算智能实验","date":"2019-12-04T07:17:08.000Z","updated":"2021-04-01T08:27:23.050Z","comments":true,"path":"2019/12/04/计算智能实验/","link":"","permalink":"https://tari0510.github.io/2019/12/04/%E8%AE%A1%E7%AE%97%E6%99%BA%E8%83%BD%E5%AE%9E%E9%AA%8C/","excerpt":"","text":":) 蚁群算法AS求解 TSP 参数一览(设任意两个城市的距离 $d_{ij}$ 为欧几里德距离) AS 中的随机比例规则(random proportional): 对于每只蚂蚁 k, 路径记忆向量 $R^{k}$ 按照访问顺序记录了所有 k 已经经过的程序序号 $ \\tau_{o}(i, j) = \\frac{m}{C^{nn}} $, m是蚂蚁个数, $C^{nn}$ 是由贪婪算法构造的路径的长度 设蚂蚁 k 当前所在城市为 i, 则其选择城市 j 作为下一个访问对象的概率为: $$p_{k}(i,j) = \\begin{cases}\\frac{[\\tau(i, j) ]^{\\alpha} [\\eta(i, j)^{\\beta } ]}{\\sum_{u \\in J_{k}(i) }[\\tau(i, u) ]^{\\alpha} [\\eta(i, u)^{\\beta } ]} &amp; \\text , ; j \\in J_{k}(i) \\;;;;;;;;;;;; 0 &amp; \\text , ; other\\end{cases}$$ $J_{k}(i)$ 表示从城市 i 可以直接到达的且又不在蚂蚁访问过的城市序列 $R^{k}$ 中的城市集合 $\\eta(i, j)$ 是一个启发式信息, 通常由 $\\eta(i, j) = \\frac{1}{d_{ij}}$ 直接计算 $\\tau(i, j)$ 表示边 (i, j) 上的信息素量 $\\alpha$ 和 $\\beta $ 是两个预先设置的参数, 实验表明 $\\alpha$ = 1, $\\beta $ = 2 ~ 5 比较合适 城市 i 与 城市 j 的相连边上的信息素量 $\\tau_(i, j)$ 按如下公式进行更新: $$\\tau(i, j) = (1 - \\rho) \\cdot \\tau(i, j) + \\sum_{ k=1 }^{m} \\Delta \\tau_{k}(i, j)\\\\Delta \\tau_{k}(i, j) = \\begin{cases}(C_{k})^{-1} &amp; , ; (i, j) \\in R^{k} \\0 &amp; ,; other\\end{cases}$$ m 是蚂蚁个数 $\\rho$ 是信息素的蒸发率, 规定 $0 &lt; \\rho \\leqslant 1 $ , $\\rho$ 通常设置为 = 0.5 $\\Delta \\tau_{k}(i, j)$ 是第 k 只蚂蚁在它经过的边上释放的信息素量(没放过当然就取 0 啦！), 它等于蚂蚁 k 本轮构建路径长度的倒数 $C_{k}$ 表示路径长度, 它是 $R^{k}$ 中所有边的长度和 ACS 与 AS 的不同的三个方面参数一览####状态转移规则， ACS中的伪随机比例规则(pseudorandom proportional): 对于每只蚂蚁 k, 路径记忆向量 $R^{k}$ 按照访问顺序记录了所有 k 已经经过的程序序号 设蚂蚁 k 当前所在城市为 i, 则下一个访问城市: $$j = \\begin{cases}arg ; max_{j \\in J_{k}(i)} {[\\tau(i, j) ], [\\eta(i, j)^{\\beta }]} &amp; \\text , ; q \\leqslant q_{0} \\S &amp; \\text , ; other\\end{cases}$$ $J_{k}(i)$ 表示从城市 i 可以直接到达的且又不在蚂蚁访问过的城市序列 $R^{k}$ 中的城市集合 $\\eta(i, j)$ 是一个启发式信息, 通常由 $\\eta(i, j) = \\frac{1}{d_{ij}}$ 直接计算 $\\tau(i, j)$ 表示边 (i, j) 上的信息素量 $\\beta$ 是描述信息素浓度和路径长度信息相对重要性的控制参数 $q_{0}$ 是一个 [0, 1] 区间内的参数, 当产生的随机数 $q \\leqslant q_{0}$ 时, 蚂蚁直接选择使启发式信息与信息素量的 $\\beta$ 指数乘积最大的下一城市节点, 我们通常称之为开发(exploitation); 反之, 当产生的随机数 $q &gt; q_{0}$ 时, ACS将和各种AS算法一样使用轮盘赌选择策略, 即偏向探索(biased exploration) 信息素全局更新规则 不论是信息素的蒸发还是释放, 都只在属于至今最优路径的边上进行 $$\\tau(i, j) = (1 - \\rho) \\cdot \\tau(i, j) + \\rho \\cdot \\Delta \\tau_{b}(i, j) , \\forall (i, j) \\in T_{b}$$ $\\Delta \\tau_{b}(i, j) = \\frac{1}{C_{b}}$ 参数 $\\rho$ 代表信息素蒸发的速率, 新增加的信息素 $\\Delta \\tau_{b}(i, j)$ 被乘上系数 $\\rho$ 后, 更新后的信息素浓度被控制在旧信息素量与新释放的信息素量之间, 用一种隐含的又更简单的方式实现了 MMAS 算法中对信息素量取值范围的限制 信息素局部更新规则$$\\tau(i, j) = (1 - \\xi) \\cdot \\tau(i, j) + \\xi \\cdot \\tau_{0}$$ $\\xi$ 是信息素局部挥发速率, 满足 $0 &lt; \\xi &lt; 1$, 通过实验发现 $\\xi = 0.1$ $\\tau_{0}$ 是信息素的初始值, 取值为 $\\frac{1}{nC^{nn}}$ 时, 对大多数实例有着非常好的性能. 其中 n 为城市个数, $C^{nn}$ 是由贪婪算法构造的路径的长度","categories":[],"tags":[{"name":"学校课程","slug":"学校课程","permalink":"https://tari0510.github.io/tags/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"}]},{"title":"记录一些杂乱的东西","slug":"乱七八糟","date":"2019-11-18T06:26:32.000Z","updated":"2021-04-01T08:27:51.600Z","comments":true,"path":"2019/11/18/乱七八糟/","link":"","permalink":"https://tari0510.github.io/2019/11/18/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/","excerpt":"","text":"能量是标量这句话意味深远呀 ～一群人纠结了一天这个题目的结果是标量还是矢量，23333 二进制的魅力~老久之前一直想记下来, 一直忘了… 12345678910111213141516import timenum_need_validate = 123423cnt = 10**7a = 0 time_start1 = time.time()for i in range(cnt): if (num_need_validate % 2) != 0: a = a + 1# 平均在这个数字 2.133270025253296print(time.time() - time_start1) 123456789101112131415161718import mathimport timenum_need_validate = 123423cnt = 10**7a = 0time_start2 = time.time()for i in range(cnt): if (num_need_validate &amp; 0) : a = a + 1 # 平均在这个数字 0.8398542404174805print(time.time() - time_start2) linux 趣事一直很好奇 vim 的 hjkl 方向键 以及 ~ 为什么是根目录…https://catonmat.net/why-vim-uses-hjkl-as-arrow-keys","categories":[],"tags":[{"name":"小记","slug":"小记","permalink":"https://tari0510.github.io/tags/%E5%B0%8F%E8%AE%B0/"}]},{"title":"佛大2019红帽杯相关咨询","slug":"2019hmb","date":"2019-10-17T16:09:54.000Z","updated":"2021-04-01T08:23:02.159Z","comments":true,"path":"2019/10/18/2019hmb/","link":"","permalink":"https://tari0510.github.io/2019/10/18/2019hmb/","excerpt":"","text":"1.什么是CTFCTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 2.什么是红帽杯红帽杯是由广东省计算机信息网络安全协会将于2019年11月在广州举办第三届红帽杯网络安全攻防（CTF）大赛。 报名时间10月10日00:00 - 11月07日24:00 初赛时间11月10日09:00 - 11月11日09:00 报名官方网站 https://www.cinsa.org.cn/2019redhat 欢迎咨询佛大信息安全协会 微信号： 范同学：fjw712452 刘同学：Glan5812 徐同学：Gtari720 3.入门CTF，你需要什么 快速学习新事物的能力 一个不一样的思考方式 一颗乐于解决问题的心 一些有趣的网络安全技术 一段充实奋斗的时光 在这里，我们希望能给予你一些建议： 善用 Google 搜索可以帮助你更好地提升自己 掌握至少一门编程语言，比如 Python 实践比什么都要管用 保持对技术的好奇与渴望并坚持下去 4.CTF是怎么比赛的由于 CTF 的考题范围其实比较宽广，目前也没有太明确的规定界限说会考哪些内容。但是就目前的比赛题型而言的话，主要还是依据常见的 Web 网络攻防、RE 逆向工程、Pwn 二进制漏洞利用、Crypto 密码攻击、Mobile 移动安全 以及 Misc 安全杂项 来进行分类。 Web - 网络攻防主要为 Web 安全中常见的漏洞，如 SQL 注入、XSS、CSRF、文件包含、文件上传、代码审计、PHP 弱类型等，Web 安全中常见的题型及解题思路，并提供了一些常用的工具。 Reverse Engineering - 逆向工程主要为逆向工程中的常见题型、工具平台、解题思路，进阶部分介绍了逆向工程中常见的软件保护、反编译、反调试、加壳脱壳技术。 Pwn - 二进制漏洞利用Pwn 题目主要考察二进制漏洞的发掘和利用，需要对计算机操作系统底层有一定的了解。在 CTF 竞赛中，PWN 题目主要出现在 Linux 平台上。 Crypto - 密码攻击主要包括古典密码学和现代密码学两部分内容，古典密码学趣味性强，种类繁多，现代密码学安全性高，对算法理解的要求较高。 Mobile - 移动安全主要为安卓逆向中的常用工具和主要问题类型，安卓逆向常常需要一定的安卓开发知识，iOS 逆向题目在 CTF 竞赛中较少出现，因此不作过多介绍。 Misc - 安全杂项以诸葛建伟翻译的《线上幽灵：世界头号黑客米特尼克自传》和一些典型 MISC 题为切入点，内容主要包括信息搜集、编码分析、取证分析、隐写分析等。 5.CTF方向那么多，我选择那一条呢 这需要你自己选择一个适合的方向，下面是各个方向的介绍。 A方向：PWN+Reverse+Crypto随机搭配 IDA工具使用（f5插件）、逆向工程、密码学、缓冲区溢出等 B方向：Web+Misc 网络安全、内网渗透、数据库安全等 公共部分：Linux基础、计算机组成原理、操作系统原理、网络协议分析 这是简单的介绍，去选择一条属于自己的路吧！ PWN、Reverse偏重对汇编、逆向的理解 Crypto偏重对数学、算法的深入学习 Web偏重对技巧沉淀、快速搜索能力的挑战 Misc比较复杂，所有与计算机安全挑战有关的都算在其中 6.我选好了路，但是怎么去学习呢下面推荐几本书： A方向：IDA pro权威指南（重要）揭秘家庭路由器0day漏洞挖掘技术RE for Beginners（逆向工程入门）自己动手写操作系统黑客攻防技术宝典：系统实战篇 B方向：Web应用安全权威指南（适合小白入门对WEB安全进行宏观的理解）黑客攻防技术宝典 Web实战篇Web前端黑客技术揭秘黑客秘籍-渗透测试实用指南代码审计：企业级Web代码安全架构 7.web、Reverse、PWN、Crypto和Misc的详细入门指导请戳我！8.总结CTF可能门槛比较高，但是入门之后你会发现其乐趣 在学习过程中遇到挫折不要轻易放弃，建议先谷歌查找相关资料，实在查不到再求助他人。 关于如何提问，建议阅读这篇文章：提问的智慧 有任何问题欢迎到群里或联系协会成员。 补充 Q1: 要是我技术不好或者基础不太好怎么办？你们会教吗？ A1: 不用担心，我们会根据你们大部分人的基础，给予你们相关资料和多次线下培训。不用担心自己什么都不会，一开始谁都是小白，本次红帽杯参赛匆忙怕取得不了好成绩的，也可以为12月份百度杯，明年1月份安恒杯做准备喔！ Q2： 教练，我迫不及待想看看ctf大概是怎样的 A2： 这个是中科大的新生ctf赛。相对会简单些的。如果有迫不及待想了解ctf是怎样的同学可以注册个账号玩玩，不懂的可以百度或者群上问喔！ https://hack.lug.ustc.edu.cn/ 2019 年度中国科学技术大学第六届信息安全竞赛即将开幕，科大信息安全大赛自 2014 年起已经连续举办五届，往届比赛均顺利举行，规模盛大，影响甚广。 赛制：个人线上比赛，解题模式，约 25 道题目； 比赛题目分为 4 类，分类如下：综合技能（general）、程序逆向与漏洞利用（binary）、密码学与数学（math）、网站安全（web）","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://tari0510.github.io/tags/ctf/"}]},{"title":"佛大2019红帽杯入门指导","slug":"2019hmb_guide","date":"2019-10-17T06:09:50.000Z","updated":"2021-04-01T08:23:07.118Z","comments":true,"path":"2019/10/17/2019hmb_guide/","link":"","permalink":"https://tari0510.github.io/2019/10/17/2019hmb_guide/","excerpt":"","text":"Web入门传送门Re 逆向 入门传送门PWN 二进制 入门传送门Crypto 密码学 入门传送门Misc 杂项 入门传送门 萌新入门刷题传送门 1.web的详细入门指导首先，大略过一下最基础的语言语法HTML／CSS、JavaScript、PHP、SQL的基本知识（平均一个语言4小时足矣），要做到看到这些代码的时候不会畏惧，能看懂大部分，看到不懂的能通过google或者相关文档查懂。主要参考：http://www.w3school.com.cn/ 、http://www.runoob.com/ , 这里不要求学很深，很浅很浅就行，后面边学边用掌握的会更快。 现在，你初步了解了一些语言知识，接下来你就需要开始在实践中学习与巩固。 当然就是实践了。这里，我建议你搭建一个个人的博客，初步了解这些语言的应用。在搭建博客的过程中，你需要学习对应的linux操作、Apache+PHP+Mysql环境的配置、域名解析、服务器端口配置等等。如何搭建博客，请自行google搜索。此外，你也可以编写一些好玩的网页来学习这些知识点。 如果你能完成如上所说的这些，尤其是第三点，那么恭喜你，你入门了，其实这些前期会遇到很多语言方面难免会遇到挫折，但是没关系，多百度多谷歌，多群里提问，我们都会及时给你解答。 接下来可以了解基本的HTTP协议相关知识 掌握HTTP请求：GET、POST、HEAD，能基本读懂一个HTTP数据包，了解GET、POST、HEAD的区别 能看懂HTTP响应包 404 403 200 500 302 301 … 了解Cookie、session、token，知道是什么东西，作用是什么，为什么需要这些东西 了解Referer、X-Forwarded-For等等的作用 学漏洞知识点之前，如果你了解了如上所说的一些东西，那么就可以学习下面的知识(进阶)啦，当然能学懂上面的知识可能需要大概3周左右的时间，多坚持，多提问。 sql注入 XSS攻击 文件上传漏洞 文件包含漏洞 命令执行漏洞 。。。 推荐一些学习站点https://ctf-wiki.github.io/ctf-wiki/&gt; https://xz.aliyun.com/ https://www.anquanke.com/ https://github.com/CHYbeta/Web-Security-Learning 推荐一些题库https://cgctf.nuptsast.com/login https://www.jarvisoj.com/login 推荐一些大牛的博客https://chybeta.github.io/ https://www.jianshu.com/u/bf30f18c872c https://skysec.top/ https://lorexxar.cn/ 推荐书籍《白帽子讲web安全》 《黑客攻防技术宝典·Web实战篇》 2.Reverse的详细入门指导逆向工程，Reverse，缩写一般为Re。旨在不知晓源码的情况下对程序进行分析，获取其流程，组织，结构等。CTF中一般为注册机这种形式。 最好会C语言和汇编语言，不必系统的学习汇编，上来先一条一条查指令手册，等熟悉了再仔细学习。 需了解常见加密算法的实现，要做到快速识别，无需了解攻击过程。 如何学习逆向呢，可以看下面这基本书学习基础知识，同时打比赛刷题，以赛带练。 推荐书籍 《汇编语言》（王爽） 这本比较老了，讲的8086汇编，但是讲的很好。 《加密与解密》（第四版）（看雪论坛） 看雪出的经典书籍，名叫加密与解密实际上是讲逆向。各方各面都有讲到，很全面。 《逆向工程核心原理》 主要是windows逆向，以OD为主要工具。讲的很好，面向零基础。 下面的我没看过，不好评价。。。 《Reverse Engineering for Beginners》(电子书：https://beginners.re/)（中文版为《逆向工程权威指南》） 《Android应用安全防护和逆向分析》 《Android软件安全与逆向分析》 常用工具 IDA Pro 极其强大的反汇编/反编译/调试工具，二进制选手必须会用，优秀的二进制选手能把IDA运用到出神入化的地步。有关IDA的使用能讲好多好多。 吾爱破解论坛爱盘下载。 x64dbg Windows平台优秀的开源反汇编器及调试器，可以看作Olly dbg的升级版，基本包含OD的全部功能，且一直在更新 官网下载。 gdb Linux的调试器，没有GUI。pwn选手必须掌握的技能。也可以使用IDA的远程调试功能调试linx程序。 一般的Linux自带，没有的话apt安装。 Jeb apk反编译工具，功能强大。 jadx 开源的apk反编译工具，轻量级 其他 dnSpy，xspy，CFF explorer等各类专用工具，需要靠做题中积累。 论坛与站点 汇编语言指令学习：https://www.cnblogs.com/del/category/121079.html 这一系列文章细致的讲解了win32汇编，遇到不认识的指令可到这里查询（当然直接翻intel指令手册是最准确的） 吾爱破解：知名破解论坛，注册有限制，需要10元注册或等开放。吾爱的爱盘内有大量常用工具，以及逆向专用虚拟机，可按需学习与使用。 https://www.52pojie.cn/ 看雪论坛：知名逆向论坛 https://bbs.pediy.com/ 安全客、先知等各类安全论坛，上面有各种大佬发的文章。 3.PWN的详细入门指导pwn，及pwn to own，在黑客俚语中由own演变而来。通过逆向分析二进制程序，发现其可能存在的漏洞，并进行利用，从而达到信息泄露、权限获取等目的。 需要掌握汇编语言、基础逆向方法。 入门推荐到CTF wiki的pwn板块学习，上面有极其详细的pwn教程，各类漏洞点及利用。 CTF一般为linux环境下的pwn，要熟悉linux的使用。 IDA Pro 强大的反编译工具，有了它就能轻松审计漏洞了。 gdb为做pwn题时调试必备的工具，网上有非常多关于gdb的教程。 pwndbg——gdb插件：https://github.com/pwndbg/pwndbg pwntools为专门用来做pwn题的工具，所以要学习python与pwntools。 其余学习教程： 一步一步学ROP系列：http://wooyun.jozxing.cc/static/drops/tips-6597.html http://wooyun.jozxing.cc/static/drops/papers-7551.html http://wooyun.jozxing.cc/static/drops/binary-10638.html http://wooyun.jozxing.cc/static/drops/papers-11390.html 堆基础学习: glibc内存管理ptmalloc源代码分析.pdf linux内核源码(建议直接看malloc free源码) 堆基础(英文blog) 推荐书籍： 《深入理解计算机系统（原书第3版）》 《程序员的自我修养—链接、装载与库》 4.Crypto的详细入门指导密码学需要较强的数学基础。ctf wiki也是入门不错的选择。 了解各种密码的实现过程，相关的攻击方法。 各种密码推荐直接到英文维基学习，讲的十分详细，一般也会有源代码。 上来学习密码学可以抄脚本，不用太关心其数学原理。等深入了解后再详细研究。 古典密码——脑洞大开的密码：链接 RSA攻击汇总：https://xz.aliyun.com/t/2446#toc-32 RSAcoppersmiths攻击：https://github.com/mimoo/RSA-and-LLL-attacks 一堆密码学的题目：https://cryptopals.com/ 推荐书籍： 《深入浅出密码学——常用加密技术原理与应用》 《密码编码学与网络安全——原理与实践（第七版》 《图解密码技术》 《应用密码学：协议、算法与C源程序》 5.Misc的详细入门指导杂项，简称Misc。杂项的内容很多很广，需要选手有较大的知识面以及快速学习新鲜事物的能力。 一般包括取证，隐写分析，编码转换，信息收集，流量分析等。有时密码学中的古典密码也被放到杂项里去。其中取证与隐写是misc最重要的一块。需要选手掌握各种花式隐写套路，需有较强的脚本功底，会用各类隐写工具。 隐写 https://www.jianshu.com/p/02fdd5edd9fc流量分析 《Wireshark网络分析就这么简单》ctf-wiki: https://ctf-wiki.github.io/ctf-wiki/misc/introduction-zh/ 适合萌新刷题入门传送门 攻防世界 有萌新区 2019中科大ctf新生赛 南京邮电大学网络攻防平台 较多为简单题 picoCTF2018和2019 美国面向高中生的ctf比赛 2018中科大ctf新生赛 github存档","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://tari0510.github.io/tags/ctf/"}]},{"title":"2019pico小汇总","slug":"2019pico","date":"2019-10-13T04:51:51.000Z","updated":"2021-04-01T08:22:55.557Z","comments":true,"path":"2019/10/13/2019pico/","link":"","permalink":"https://tari0510.github.io/2019/10/13/2019pico/","excerpt":"","text":"和两位新认识的小伙伴一起玩了1天，虽然解出来的题不算很多，但玩的还是很开心。picoctf相对来说也会简单些，但是也还是有收货的。在此记录一下。由于国庆比较忙，也没有继续在解题了，然后也忘了写记录了，emmm。下图是我们队伍的1天的解题成果。这是报了小伙伴的大腿@guoguo @回忆 过些天再补上心得，2333","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://tari0510.github.io/tags/ctf/"}]},{"title":"计算智能入门作业","slug":"计算智能入门","date":"2019-10-03T16:35:37.000Z","updated":"2021-04-01T08:27:29.184Z","comments":true,"path":"2019/10/04/计算智能入门/","link":"","permalink":"https://tari0510.github.io/2019/10/04/%E8%AE%A1%E7%AE%97%E6%99%BA%E8%83%BD%E5%85%A5%E9%97%A8/","excerpt":"","text":"老师布置的作业 描述 BP 神经网络（BPNN）的训练过程，推导 3 层 BPNN 调整网络权重和偏置量的公式。 这公式推导有点难度… :(然后网上查了许多资料，有两个收获: 神经网络在隐藏层做了什么 把天天听闻的线性代数对神经网络重要性联系在一起 隐藏层：该层可以说是神经网络的关键，相当于对数据做一次特征提取。隐藏层的意义，是把前一层的向量变成新的向量。就是坐标变换，说人话就是把数据做平移，旋转，伸缩，扭曲，让数据变得线性可分。可能这个不那么好理解，举个栗子： 下面的图左侧是原始数据，要把绿点和红点分割开，要怎么做呢？ 上面二图可以在这玩 一种做法：把左图的平面看成一块布，把它缝合成一个闭合的包包（相当于数据变换到了一个3维坐标空间），然后把有绿色点的部分撸到顶部（伸缩和扭曲），然后外围的红色点自然在另一端了，要是姿势还不够帅，就挪挪位置（平移）。这时候干脆利落的砍一刀，绿点红点就彻底区分开了。 论线性代数的重要性，联系不起来可来这里补课b站线性代数的本质 关于线性变换到3维空间 不同维度的变换是合理的 例如下面这个矩阵，它的几何意义就是将二维空间映射到三维空间上 $$ \\begin{bmatrix} 3 &amp; 1\\ 4 &amp; 1\\ 5 &amp; 9 \\end{bmatrix} $$ 因为矩阵有两列表面输入空间有两个基向量， 有三行表示每一个基向量在变换后都用三个独立的坐标来描述 所以它们一定落在三维空间中，因此这是一个从二维空间到三维空间的变换 不太理解可以看此视频 b站线性代数的本质-第四章 再如下面这个矩阵 $$ \\begin{bmatrix} 3 &amp; 1 &amp; 4\\ 1 &amp; 5 &amp; 9 \\end{bmatrix} $$ 矩阵三列表示原始空间有三个基向量，也就是说原始空间是三维 有两行表明这三个基向量在变换后都仅用两个坐标来描述 所以它们一定落在二维空间中，因此这是一个从三维空间到二维空间的变换 一个二维向量输入到三维向量输出:$$\\begin{bmatrix}3\\1\\end{bmatrix}\\rightarrow L\\left ( \\vec{\\nu} \\right ) \\rightarrow \\begin{bmatrix}1\\8\\2\\end{bmatrix}$$ 回想线性代数，$ L\\left ( \\vec{\\nu} \\right ) $ 是一个3行2列的矩阵则 $ L\\left ( \\vec{\\nu} \\right ) $ 乘以2行1列(3,1)的矩阵就是以它为基向量作基变换得到的结果就是升维到三维空间后的向量 # 吹完水了，开始推导公式…hexo 支持LaTex参考链接 三层 BPNN 调整网络权重和偏置量的公式分别为$$ \\omega_{ij}=\\omega_{ij} + \\Delta \\omega_{ij} = \\omega_{ij} + (\\eta)O_{i}E_{j} \\qquad (1) $$$$ b_{j}=b_{j} + \\Delta b_{j} = b_{j} + (\\eta)E_{j} \\qquad\\quad\\quad (2) $$ 其中： $\\omega_{ij}$ 表示输入层到隐含层的权重，$\\eta$ 表示学习率 $O_{i}$ 表示上一层单元i的输出，$E_{j}$ 表示j层神经元误差 $b_{j}$ 表示j单元偏置量(至于为什么取名为b，下面有提到) 现需要推导(1)(2)式子等号成立 先取激活函数$$f(x)=\\frac{1}{1+e^{-x}}$$ 由上图除了输入层的神经元，每个神经元都会有加权求和得到的输入值 z 和将 z 通过 Sigmoid 函数（也即是激活函数）非线性转化后的输出值 a，他们之间的计算公式如下$$z_{i}^{j}=\\sum_{i=1…n}w_{ij}\\cdot a_{ij}^{l-1}-b_{j}^{l} \\qquad (3)\\a_{j}^{l}=f(z_{j}^{(l)})=\\frac{1}{1+e^{-z_{j}^{(l)}}} \\quad (4)$$ 式子(3)，是不是和 y = kx + b类似？ 其实b可以理解为线性偏差 (这也是取b为名的原因，方便理解) 然后代入到Sigmoid 函数中做非线性变换，做这个变换主要是因为线性模型的表达能力不够(详情请戳我)，其实这个非线性变换也有它的缺点，比如 梯度消失、不是0均值、不是0均值 因为输出层的值与真实的值会存在误差，我们可以用均方误差来衡量预测值和真实值之间的误差。$$E=\\frac{1}{2}\\sum_{j=1}^{l}(Y_{j}^{k}-a_{j}^{l})^{2} \\qquad (5)$$ 其中 $Y_{j}^{k}$ 表示期望输出，是已知量 误差肯定是越小越好。因此，我们就要调整w和b值， 使得误差函数的值最小。 要求式子(5) 在两个变量 ( $\\omega$ 和 $b$ ) 取不同值时的最值，首先想到的就是求各自的偏导了 引入式子(1) 和 (4) 对目标函数 E 求 $\\omega$ 和 $b$ 的偏导可以得到 $\\omega$ 和 $b$ 的更新量 下面拿求 $\\omega$ 偏导来做推导。$$\\Delta \\omega_{ij} = \\eta\\frac{\\partial E}{\\partial w_{hj}} \\qquad (6)$$ $\\eta$ 学习率取值通常为 0.1 ~ 0.3,可以理解为每次梯度所迈的步伐。 $w_{hj}$为 h 和 j 两层神经元之间的权重 注意到 $w_{hj}$ 的值先影响到第 j 个输出层神经元的输入值 a，再影响到输出值 y 根据链式求导法对权重求偏导有：$$\\frac{\\partial E}{\\partial w_{hj}} =\\frac{\\partial E}{\\partial a_{j}^{l}}\\cdot \\frac{\\partial a_{j}^{l}}{\\partial z_{j}^{l}}\\cdot\\frac{\\partial z_{j}^{l}}{\\partial w_{hj}} \\qquad (7)$$ 由 (3) 有:$$\\frac{\\partial z_{j}^{l}}{\\partial w_{hj}} = {(\\sum_{i=1…n}w_{hj}\\cdot a_{hj}^{l-1}-b_{j}^{l})}’ = a_{hj}^{l-1} = O_{i} \\qquad (8)$$ 与神经网络结构图对应知 $ a_{hj}^{l-1} $ 为上一层单元i的输出 $ O_{i} $ Sigmoid 求导的式子如下，求导过程请戳我$$f{}’(x) = f(x)(1-f(x)) \\qquad (9)$$由 (5) 和 (9) 有：$$\\frac{\\partial E}{\\partial a_{j}^{l}}\\cdot \\frac{\\partial a_{j}^{l}}{\\partial z_{j}^{l}} = -\\frac{1}{2}\\cdot 2\\cdot (Y_{j}^{k}-a_{j}^{i})\\cdot \\frac{\\partial a_{j}^{l}}{\\partial z_{j}^{l}}=a_{j}^{l}\\cdot (1-a_{j}^{l})\\cdot (Y_{j}^{k}-a_{j}^{l}) = E_{j} \\qquad (10)$$ 再看看式子 (1) 和 (2) 中的 $E_{j}$，课本给出 关于 $ E_{j} $的公式:$$E_{j} = O_{j}(1-O_{j})(T_{j}-O_{j}) = O_{j}(1-O_{j}))\\sum_{k}w_{jk}E_{k} \\qquad (11)$$ 其中 $ T_{j} $ 是输出单元 $j$ 的预期是输出， 即式子 (10) 中的 $ Y_{j}^{k} $ $ E_{k} $ 表示它连接的后面一层的单元 $k$ 的误差, 由此看式子 (11) 其实还挺容易理解的：$ O_{j}(1-O_{j}) $ 表示 sigmod函数的偏导，即表示调整误差的速度即 j 层神经元误差是通过预期输出与实际输出的差值和调整误差速度来获取的 激动人心的时候到啦!! 式子 (1)为: $ \\omega_{ij}=\\omega_{ij} + \\Delta \\omega_{ij} $ 式子 (6)为: $ \\Delta \\omega_{ij} = \\eta\\frac{\\partial E}{\\partial w_{hj}} $ 式子 (7)为: $ \\frac{\\partial E}{\\partial w_{hj}} =\\frac{\\partial E}{\\partial a_{j}^{l}}\\cdot \\frac{\\partial a_{j}^{l}}{\\partial z_{j}^{l}}\\cdot\\frac{\\partial z_{j}^{l}}{\\partial w_{hj}} $ 式子 (8) 和 (10) 分别为: $ \\frac{\\partial z_{j}^{l}}{\\partial w_{hj}} = a_{hj}^{l-1} = O_{i} \\qquad $ $ \\frac{\\partial E}{\\partial a_{j}^{l}}\\cdot \\frac{\\partial a_{j}^{l}}{\\partial z_{j}^{l}} = a_{j}^{l}\\cdot (1-a_{j}^{l})\\cdot (Y_{j}^{k}-a_{j}^{l}) = E_{j} $ 即: $ \\Delta \\omega_{ij} = (\\eta)O_{i}E_{j} $ 类似也可以证得偏置量公式 $ b_{j} = -(\\eta)E_{j} $心累,,,不过推导完后，感觉还挺好玩的，23333 参考链接：csdn: zhiyong_willgithub: edvardHuacsdn: csdn人工智能头条","categories":[],"tags":[{"name":"学校课程","slug":"学校课程","permalink":"https://tari0510.github.io/tags/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"}]},{"title":"wordpress 常见问题汇总","slug":"wordpress_problem","date":"2019-09-23T08:21:21.000Z","updated":"2021-04-01T08:29:24.093Z","comments":true,"path":"2019/09/23/wordpress_problem/","link":"","permalink":"https://tari0510.github.io/2019/09/23/wordpress_problem/","excerpt":"","text":"wordpress升级后后台访问不了Cannot Modify Header Information – Headers Already Sent By……. 解决办法一：在主题目录下functions.php开头加入ob_start()； 解决办法二：找到sent by后面的.php文件，保存为UTF-8无BOM编码格式; vim 的话，命令模式输入 :set nobomb 即可转换为UTF-8无BOM编码格式 wordpress 后台媒体库不显示以及上传错误在&lt;!DOCTYPE&gt; 声明之前有其他的代码导致浏览器不能正确识别页面的标准，所以才造成了某些基于html5的特性不能使用。 参考链接 https://www.zmki.cn/1428.html","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"2019年第三届广东省强网杯网络安全大赛WEBwriteup","slug":"2019qwb","date":"2019-09-10T12:08:00.000Z","updated":"2021-04-01T08:22:48.048Z","comments":true,"path":"2019/09/10/2019qwb/","link":"","permalink":"https://tari0510.github.io/2019/09/10/2019qwb/","excerpt":"","text":"八卦本次比赛的一个槽点，为什么是在星期一二举行咧… 由于我只会一点 web ，所以只解出几道 web 题 Writeby TARITARI 1. Web – 小明又被拒绝了看到题目很容易想到改http头，于是抓包。一开始直接改cookie: admin=1无效，后来想了下，小明如果是本地人就不会被拒绝啦！于是用到X-Forwarded-For字段，伪造ip为本地地址127.0.0.1。提交过去发现不是admin，改好cookie后即可获得flag{xxasdasdd_for} 2. Web – XX？看到题目就想到了xxe，先访问网站发现网站的标题为gedit 然后网上搜了下发现gedit在写完文件后，默认会产生一个以~结尾的备份文件名例如：index.php~。这可用于从服务器中提取源代码/文件。然后御剑扫描发现有三个文件，于是访问index.php~得到源码。哦豁，果然是xxe。 我有一个大胆的想法，flag.php会不会也有呢？好吧，没有。那我们继续外部实体注入攻击，结合扫描出来的flag.php，得到base64编码。解码可得flag{IUyasd8213123123890} 3. 免费的,ping一下~结合题目和页面，是php ping命令执行无误了，ls一下，果然是这样。然后尝试ls一下根目录，发现waf过滤敏感字符了。于是测试被过滤掉的是空格还是“/“斜杠。结合网上搜一下，得知中有个变量叫IFS(Internal Field Seprator) ,内部域分隔符，即空格。代替原来的成功执行了。继续ls得知原来是空格被waf过滤掉了。嘿嘿，那就是可以cat /flag啦，执行以下，然后得知cat 或flag关键字又被过滤了。由于我偶尔会编写shell脚本，想到用变量拼接可以绕过关键字的过滤。然后一顿猛如虎的操作，结果被告知flag不在第一行。而且他只能显示部分内容。。。最后使用tail -n 1 /flag 成功获取flag{llllll_U_GeT_Th3_fl4g} 4. php访问页面得到一个apache的欢迎页面，于是直接用御剑扫，得到三个文件访问index.php得知本题为条件绕过型题目。第一眼看过去整个人傻了，无数字字母还好说，可以用异或^，左右移等等去绕过。然后发现取反和自增可以绕过，但是长度只有27，太苛刻了。于是想到，如果这个是php7，那么就可以利用php7的新特性，即可以通过($function)();的方式动态执行函数。https://www.php.net/manual/zh/migration70.incompatible.php取反~符号可以把字母数字符号等等变为不可见字符，就可以轻松绕过正则了，为了被成功解析，使用urlencode一下。 先copy下来，本地测试，注释掉错误回显，方便调试。先试试phpinfo测试一下，通过 echo urlencode(~”phpinfo”)构造一下。 加上(~exp)(); 试试，就发现可以在题目环境中成功执行，接下来就简单了。 构造 GetYourFlag调用GetYouFlag()OK，接下来最后发现flag{3904c5df2e894ca02a21004feb21e617} 在源码中。","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://tari0510.github.io/tags/ctf/"}]},{"title":"wordpress后台登录密码前端js加密+php后端解密","slug":"wordpress后台登录加密","date":"2019-08-26T13:03:23.000Z","updated":"2021-04-01T08:29:28.932Z","comments":true,"path":"2019/08/26/wordpress后台登录加密/","link":"","permalink":"https://tari0510.github.io/2019/08/26/wordpress%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E5%8A%A0%E5%AF%86/","excerpt":"","text":"由于特殊原因，wordpress后台登录密码不能被明文抓包…于是我采用 rsa 前端 js 加密 + php 后端解密 的方式进行 那只能大费周章去改wordpress代码了= = 。。。。 由于 wordpress 登录时 wp-login.php 是直接提交表单给自己的于是想到用 jquery 去修改表单数据， 直接上代码。 wordpress根目录 wp-login.php 文件此处需要用到两个库文件 jQuery 和 jsencrypt在表单代码后面的 js 处 添加 123456789101112131415161718&lt;script type=&quot;text/javascript&quot; src=&quot;./wp-includes/js/jquery/jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./wp-includes/js/jsencrypt.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; /* * writeBy：TARI * date: 2019/08/26 * usage: $(&quot;#user_pass&quot;).change方法对密码进行 rsa 公钥加密传输 */ $(&quot;#user_pass&quot;).change(function()&#123;//失去焦点触发，就是点击登陆按钮后触发 // 数据处理 var pubkey = &#x27;你的公钥&#x27; var encrypt = new JSEncrypt(); encrypt.setPublicKey(pubkey); var encrypted = encrypt.encrypt($(&#x27;#user_pass&#x27;).val()) $(&quot;#user_pass&quot;).val(encrypted); //重新赋值 &#125;);&lt;!-- 下面还有wp_attempt_focus()等函数， 或者新建一对 js 标签也行，不过我没测试过 --&gt;&lt;/script&gt; wordpress根目录/wp-includes/pluggable.php 文件12345678910111213141516function wp_authenticate($username, $password) &#123; $username = sanitize_user($username); $password = trim($password); // 这里后添加如下代码： // 私钥不能因为好看而添加乱七八糟的缩减之类的 $private_key = &quot;私钥内容&quot;; $decrypt_data = &#x27;&#x27;; // 判断私钥是否是可用的，可用返回资源id $pi_key = openssl_pkey_get_private($private_key); // 解密数据, 这里要进行 base64 解码是因为浏览器会默认帮你的数据进行编码 openssl_private_decrypt(base64_decode($password), $decrypt_data, $private_key); $password = $decrypt_data; //下面一堆代码 balabala&#125; 再抓包密码就是加密状态啦！在 wordpress 找密码验证的函数和文件找了挺久的….","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"nginx双冗余及负载均衡搭建","slug":"Redundancy and load balancing","date":"2019-07-28T07:03:22.000Z","updated":"2021-04-01T08:29:08.590Z","comments":true,"path":"2019/07/28/Redundancy and load balancing/","link":"","permalink":"https://tari0510.github.io/2019/07/28/Redundancy%20and%20load%20balancing/","excerpt":"","text":"nginx 双冗余nginx 冗余安装脚本链接配置文件的 链接在此 **注意事项** /etc/selinux/configSELINUX=off 感觉线上和线下一个比较大的区别就在防火墙，线下可以的在被这个卡了半天 123# eth0 该字段根据网卡类型来定义firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --in-interface eth0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --reload 这个ip转发用不用就忘了测试了，如果开启防火墙还不行就试试吧。echo “net.ipv4.ip_forward = 1” &gt;&gt; /etc/sysctl.conf 如果没装 zlib zlib-devel openssl 的记得安装喔！ *** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS. 1yum -y install libnl libnl-devel nginx 负载均衡nginx 配置文件内 upstream yourname &#123; yourip; &#125; location / &#123; proxy_pass http://yourname; &#125;","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"「量詞」","slug":"「量詞」","date":"2019-07-23T11:33:28.000Z","updated":"2021-04-01T08:27:05.976Z","comments":true,"path":"2019/07/23/「量詞」/","link":"","permalink":"https://tari0510.github.io/2019/07/23/%E3%80%8C%E9%87%8F%E8%A9%9E%E3%80%8D/","excerpt":"","text":"- –&gt; –&gt; - １ いち か さ た は 行 いっ 枚、回、台、歳 ６ ろく か さ た は 行 ろっ 枚、回、台、歳 ８ はち か は 行 はっ 枚、回、台、歳 １０ じゅう か さ た は 行 じゅっ 枚、回、台、歳 例：リンゴを三つ買いました&emsp;&emsp;写真を3枚撮りました&emsp;&emsp;蜜柑を８つ食べました 昨日は4時間しか寝ませんでしたしか + ませんでした 要翻訳成肯定 [量詞] + も 強調 [重 厚 長 大 多]ケーキを8個も食べました [量詞] + しか 強調 [軽 薄 短 小 少]財布に１０元しかありません [量詞] だけ zhiyou~ 10分だけ休みましょう [量詞] ぐらい ~左右 財布に１０元ぐ(く)らいあります [量詞] は zhishao~ 財布に１０００元はあります","categories":[],"tags":[{"name":"勉強","slug":"勉強","permalink":"https://tari0510.github.io/tags/%E5%8B%89%E5%BC%B7/"}]},{"title":"Web站群从Ubuntu14.04迁移至CentOS7","slug":"ansible-shell","date":"2019-07-15T04:47:50.000Z","updated":"2021-04-01T08:28:00.775Z","comments":true,"path":"2019/07/15/ansible-shell/","link":"","permalink":"https://tari0510.github.io/2019/07/15/ansible-shell/","excerpt":"","text":"nfs迁移 系统环境: CentOS-7-x86_64-Minimal-1511相关的剧本和脚本可以 参考我的github common.sh 为公用脚本，包含公用模块 服务器备份1ansible-playbook srvs_backup_role.yml 出现问题: failed: [192.168.206.132] (item=baseVersionBackup.sh) =&gt; &#123;&quot;changed&quot;: false, &quot;checksum&quot;: &quot;fe2fab79a66b8f5489418fd7b556cdbb74abcac6&quot;, &quot;item&quot;: &quot;baseVersionBackup.sh&quot;, &quot;msg&quot;: &quot;Aborting, target uses selinux but python bindings (libselinux-python) aren&#39;t installed!&quot;&#125; failed: [192.168.206.132] (item=common.sh) =&gt; &#123;&quot;changed&quot;: false, &quot;checksum&quot;: &quot;b8554aa38d74846821d3575eaf72854f2eb40338&quot;, &quot;item&quot;: &quot;common.sh&quot;, &quot;msg&quot;: &quot;Aborting, target uses selinux but python bindings (libselinux-python) aren&#39;t installed!&quot;&#125; 这个问题主要是由 SELinux（Security-Enhanced Linux）引起的. CentOS7 一般自带 libselinux-python 12# 没有的话可以安装一下yum -y install libselinux-python 由于我不大了解它, 干脆就把它的禁用了, 记得在目标主机禁用喔.. 123sed -i &#x27;/^SELINUX/s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config &amp;&amp;sed -i &#x27;/^SELINUX/s/SELINUX=permissive/SELINUX=disabled/&#x27; /etc/selinux/config 更新源为阿里云源这个过程可能要下载的东西较多，有些主机可能写到大半就连接超时了。对于少许主机可以直连上去执行 yum update 1ansible-playbook yum_aliyun_source_role.yml openssh 安装启用 telnet 以防万一12ansible webGroup -m shell -a &#x27;yum -y install xinetd telnet-server&#x27;ansible webGroup -m shell -a &#x27;ls -ll /etc/xinetd.d/telnet&#x27; 添加用户以防万一1234567---- hosts: webGroup remote_user: root tasks: - name: create username user user: name=username password=yourpassword 123456789---- hosts: &#123;&#123; runHost &#125;&#125; remote_user: root tasks: - name: create username group group: name=username state=absent - name: create username user user: name=username state=absent 关闭防火墙，让外边的 telnet 请求可以进来 1firewall-cmd --add-service=telnet --permanent 或者 1234iptables -I INPUT -p tcp --dport 23 -jACCEPTiptables -I INPUT -p udp --dport 23 -jACCEPTservice iptables saveservice iptables restart 准备工作完成，开始安装 OpenSSH1ansible-playbook openssh_role.yml 确认是否升级成功 1ansible webGroup -m shell -a &quot;ssh -V&quot; 重启一下主机，等待少许时间并检测 sshd 的状态， 123ansible webGroup -m shell -a &quot;reboot&quot;ansible webGroup -m shell -a &quot;systemctl status sshd&quot; 对于有问题的少许主机可以直连上去执行 systemctl stop sshd 并等待少许执行systemctl start sshd 开启防火墙，阻止外边的 telnet 请求进来 1firewall-cmd --remove-service=telnet 或者 1iptables -A INPUT -p tcp --dport 23 -jDROP 对相应的服务器安装 nginx 1.16.01ansible-playbook nginx_role.yml nginx的配置根据旧服务器的来就好了. nginx 双冗余nginx 存活探测脚本链接配置文件的 链接在此//注意事项// 脚本要用到 killall 命令, 没有的同学记得装, centos killall的包是，不过我的脚本会默认帮你装上。 1yum -y install psmisc 防火墙的的网卡 eth0 记得跟根据自己的网卡来 12firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --in-interface eth0 --destination 224.0.0.18 --protocol vrrp -j ACCEPTfirewall-cmd --reload nginx 负载均衡这个比较容易, 需要注意的是如果用到 session 记得用 哈希法 即添加 ip_hash; 到 upsteam 中就好啦 对相应的服务器安装 PHP7.21ansible-playbook php_role.yml 根据网上资料推荐使用 sock 而且不是 端口cgi 模式php旧服务器的配置更换了 /etc/php.ini 和 /etc/php-fpm.d/www.conf 文件到新服务中 对相应的服务器安装 mysql5.71ansible-playbook mysql_role.yml 安装完后记得对导入的数据授权喔！！！不然远程连接会被禁止掉的。 为了方便知道自己操控哪个服务器在 /etc/bashrc 或 ~/.bashrc 文件最后添加 1export PS1=&quot;[\\u@`hostname -I | cut -d &quot;.&quot; -f 4`\\W]# &quot; 然后 source 一下 调整时间、时区由于我的时间和北京时间是一样的, 所以我就省略这步啦! nfs 服务器的迁移common.sh 和 nfs.sh 脚本位置首先配置要使用 nfs 服务的服务器路径 # /etc/exports 文件 /home/www/某个站点 ip地址(rw,sync,all_squash,no_subtree_check) /home/www/某个站点 IP地址(rw,sync,all_squash,no_subtree_check) /home 路径是下图 mounted on 下的路径 参数说明: rw 读写权限 sync 数据同步写入内存缓冲区和硬盘, 保证数据一致 all_squash 所有访问用户都映射为匿名用户或用户组 no_subtree_check 即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限 把文件传送到目标服务器balabala～ 1systemctl reload nfs 允许相应服务的防火墙 1234firewall-cmd --add-service=nfs --permanent --zone=publicfirewall-cmd --add-service=mountd --permanent --zone=publicfirewall-cmd --add-service=rpc-bind --permanent --zone=publicfirewall-cmd --reload 创建相应文件的软连接方便nfs上nginx的使用在web服务器上创建要挂载的文件夹并挂载 临时挂载 1mount -t nfs nfs的IP地址:路径 本机路径 /etc/fstab 文件添加以用于开机启动 nfs的ip地址:路径 本机路径 nfs rw 0 0 nfs的ip地址:路径 本机路径 nfs rw 0 0 需要主要，两台不同服务器的用户的gid和uid一不一致，不然会出现旧服务器无法写入的现象 rsync 增量备份小前言: 权限明明够，但是一直报这个错： rsync: recv_generator: mkdir &quot;test&quot; (in home_131) failed: Permission denied (13) 后来发现 selinux 没关闭。。。。。。。。。。。。 首先开放端口吧！如果用的是 iptables 1vi etc/sysconfig/iptables 添加 -A INPUT -p tcp -m state --state NEW -m tcp --dport 873 -j ACCEPT 或者直接 1iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 873 -j ACCEPT 然后再重启一下就行了 1systemctl restart iptables 或 1iptables-save 如果用的是 firewalld 123firewall-cmd --add-port=873/tcp --permanent &amp;&amp;firewall-cmd --reload &amp;&amp;firewall-cmd --list-port 我搭建的 rsync 是这样子的，主服务器 (也就是正在运行Web服务器的服务器) 文件发生改变 (内容改变或者文件本身的增加或者删除) 就会通过监听脚本自动备份到备份服务器 以下安装和配置 rsync 是参考该链接 站长那些事儿 两台服务器一起安装 rsync1yum install rsync xinetd -y 还要增加一个配置文件 (这个配置文件在CentOS7下不存在，我们手动创建) 1vi /etc/xinetd.d/rsync 内容如下 # default: off # description: The rsync server is a good addition to an ftp server, as it \\ # allows crc checksumming etc. service rsync &#123; disable = no flags = IPv6 socket_type = stream wait = no user = root server = /usr/bin/rsync server_args = --daemon log_on_failure += USERID &#125; 是 从这里 找滴，亲测可用 接下来是 负责备份的服务器 的事情了1vi /etc/rsyncd.conf 添加以下内容 log file = /var/log/rsyncd.log pidfile = /var/run/rsyncd.pid lock file = /var/run/rsync.lock secrets file = /etc/rsync.pass motd file = /etc/rsyncd.Motd #模块名称 [test] #你想备份在本服务器哪个路径就填呗 path = /home/test #描述随便加 comment = just a test uid = 0 gid = 0 port = 873 use chroot = no read only = no list = no max connections = 200 timeout = 600 #认证用户名，可以随便取 auth users = test_user #主服务器IP地址 hosts allow = 你的ip地址 认证用户和密码文件，系统原本没有，需要我们手动创建的喔。该文件名字可以随意 1vi /etc/rsync.pass 里面是内容是 键值对 test_user:testpass 这里注意啦，必须是权限必须是 600 喔 123chmod 600 /etc/rsyncd.conf &amp;&amp;chmod 600 /etc/rsync.pass &amp;&amp;service xinetd restart 启动 rsync 有些需要有些不需要， 可能是防火墙原因阻拦了其他端口… 1rsync --daemon --config&#x3D;&#x2F;etc&#x2F;rsyncd.conf --port&#x3D;873 接下来到 主服务器 的事情了首先创建密码文件，文件名字也是可以随意喔！ 1vi /etc/passwd.rsync 内容注意啦 testpass 是 刚刚备份服务器 /etc/rsync.pass 目录下认证用户的密码喔，只需填上面红字的内容就OK啦 这里权限也要注意，必须是 600 喔 12chmod 600 /etc/passwd.rsync &amp;&amp;service xinetd restart 先安装预编译所需要的工具 1yum install make gcc gcc-c++ -y 然后下载和安装inotify-tools 123456cd /usr/local/src &amp;&amp;wget https://download.laobuluo.com/tools/inotify-tools-3.14.tar.gz &amp;&amp;tar -zxvf inotify-tools-3.14.tar.gz &amp;&amp;cd inotify-tools-3.14 &amp;&amp;./configure --prefix=/usr/local/inotify &amp;&amp;make &amp;&amp; make install 配置环境变量 1234echo &quot;PATH=/usr/local/inotify/bin:$PATH&quot; &gt;&gt;/etc/profile.d/inotify.sh &amp;&amp;source /etc/profile.d/inotify.sh &amp;&amp;echo &quot;/usr/local/inotify/lib&quot; &gt;/etc/ld.so.conf.d/inotify.conf &amp;&amp;ln -s /usr/local/inotify/include /usr/include/inotify 配置参数 1vi /etc/sysctl.conf 注释后面添加 fs.inotify.max_queued_events=99999999 fs.inotify.max_user_watches=99999999 fs.inotify.max_user_instances=65535 创建排除目录列表 1vi /usr/local/inotify/exclude.list 创建一个排除目录，这里可以添加不同步的目录，一行一个目录。如果暂时没有可以留空，以后需要用到在添加。 如果 uploads 目录是挂载目录可以排除掉 wp-content/uploads/ 增量备份脚本 1vi /usr/local/inotify/rsync.sh 123456789101112131415161718192021222324#!/bin/sh#主服务器需要备份的目录srcdir=/home/test#模块名称dstdir=testexcludedir=/usr/local/inotify/exclude.list#认证名称rsyncuser=test_user#本机存密码的目录rsyncpassdir=/etc/passwd.rsync#备份服务器的IP地址dstip=&quot;备份服务器滴IP地址&quot;for ip in $dstipdorsync -avH --port=873 --progress --delete --exclude-from=$excludedir $srcdir $rsyncuser@$ip::$dstdir --password-file=$rsyncpassdirdone/usr/local/inotify/bin/inotifywait -mrq --timefmt &#x27;%d/%m/%y %H:%M&#x27; --format &#x27;%T %w%f%e&#x27; -e close_write,modify,delete,create,attrib,move $srcdir | while read filedofor ip in $dstipdorsync -avH --port=873 --progress --delete --exclude-from=$excludedir $srcdir $rsyncuser@$ip::$dstdir --password-file=$rsyncpassdirecho &quot; $&#123;file&#125; was rsynced&quot; &gt;&gt; /tmp/rsync.log 2&gt;&amp;1donedone 脚本可执行权限 1chmod +x /usr/local/inotify/rsync.sh 添加开机启动 1vi /etc/rc.d/rc.local 开机启动文件中最后一行添加 sh /usr/local/inotify/rsync.sh &amp; 通过互换 ip 迁移服务器Centos重启网络配置文件会导致 /etc/resolv.conf 被覆盖或清空 进而导致 yum 无法使用","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"ansible","slug":"ansible","permalink":"https://tari0510.github.io/tags/ansible/"}]},{"title":"Install_OpenSSH8.0p1_from_source","slug":"Install-OpenSSH8-0p1-from-source","date":"2019-07-14T08:04:44.000Z","updated":"2021-04-01T08:28:19.352Z","comments":true,"path":"2019/07/14/Install-OpenSSH8-0p1-from-source/","link":"","permalink":"https://tari0510.github.io/2019/07/14/Install-OpenSSH8-0p1-from-source/","excerpt":"","text":"系统环境: CentOS-7-x86_64-Minimal-1511root用户+备份+下载包+校验包 一气呵成Package Information (包的相关信息) Download (HTTP): https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-8.0p1.tar.gz Download MD5 sum: bf050f002fe510e1daecd39044e1122d Download size: 1.5 MB Estimated disk space required: 45 MB (add 12 MB for tests) Estimated build time: 0.4 SBU (running the tests takes 17+ minutes, irrespective of processor speed) 虽然没出过事, 但还是要留条退路安装 telnet 12yum -y install telnet-server.x86_64 &amp;&amp;yum -y install telnet.x86_64 安装 xinetd (提供访问和日志管理等功能) 1yum -y install xinetd.x86_64 开启服务 &amp;&amp; 开机启动 12345systemctl start xinetd &amp;&amp;systemctl start telnet.socket &amp;&amp;systemctl enable telnet.socket &amp;&amp;systemctl enable xinetd.service 预编译如果直接上可能出现以下 4 个问题: 一checking for cc... no checking for gcc... no configure: error: in \\`/root/openssh-8.0p1&#39;: configure: error: no acceptable C compiler found in $PATH See \\`config.log&#39; for more details 缺少 cc 和 gcc 编译器, 解决方法: 1yum -y install cc gcc 二checking for zlib.h... no configure: error: *** zlib.h missing - please install first or check config.log *** 缺少 zlib-devel 环境, 解决方法: 1yum -y install zlib-devel 三configure: error: *** working libcrypto not found, check config.log libcrypto 有点眼熟…解决方法: 1yum install openssl-devel 四configure: error: PAM headers not found 缺少pam-devel环境, 解决方法: 1yum install pam-devel 设置适当的环境以用于其他安装步骤： 123456789install -v -m700 -d /var/lib/sshd &amp;&amp;chown -v root:sys /var/lib/sshd &amp;&amp;groupadd -g 50 sshd &amp;&amp;useradd -c &#x27;sshd PrivSep&#x27; \\ -d /var/lib/sshd \\ -g sshd \\ -s /bin/false \\ -u 50 sshd 安装官网的编译应该木得问题了 12345./configure --prefix=/usr \\ --sysconfdir=/etc/ssh \\ --with-md5-passwords \\ --with-pam \\ --with-privsep-path=/var/lib/sshd 编译并测试下make &amp;&amp; make test 安装12345678make install &amp;&amp;install -v -m755 contrib/ssh-copy-id /usr/bin &amp;&amp;install -v -m644 contrib/ssh-copy-id.1 \\ /usr/share/man/man1 &amp;&amp;install -v -m755 -d /usr/share/doc/openssh-8.0p1 &amp;&amp;install -v -m644 INSTALL LICENCE OVERVIEW README* \\ /usr/share/doc/openssh-8.0p1 遇到的两个错误信息一/etc/ssh/sshd_config line 79: Unsupported option GSSAPIAuthentication /etc/ssh/sshd_config line 80: Unsupported option GSSAPICleanupCredentials 注释掉这两行就好啦, 解决方法: 12345sed -i &#x27;/^GSSAPICleanupCredentials/s/GSSAPICleanupCredentials yes/#GSSAPICleanupCredentials yes/&#x27; /etc/ssh/sshd_config &amp;&amp;sed -i &#x27;/^GSSAPIAuthentication/s/GSSAPIAuthentication yes/#GSSAPIAuthentication yes/&#x27; /etc/ssh/sshd_config &amp;&amp;sed -i &#x27;/^GSSAPIAuthentication/s/GSSAPIAuthentication no/#GSSAPIAuthentication no/&#x27; /etc/ssh/sshd_config 二@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0640 for &#39;/etc/ssh/ssh_host_rsa_key&#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Unable to load host key &quot;/etc/ssh/ssh_host_rsa_key&quot;: bad permissions Unable to load host key: /etc/ssh/ssh_host_rsa_key @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0640 for &#39;/etc/ssh/ssh_host_ecdsa_key&#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Unable to load host key &quot;/etc/ssh/ssh_host_ecdsa_key&quot;: bad permissions Unable to load host key: /etc/ssh/ssh_host_ecdsa_key @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0640 for &#39;/etc/ssh/ssh_host_ed25519_key&#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Unable to load host key &quot;/etc/ssh/ssh_host_ed25519_key&quot;: bad permissions Unable to load host key: /etc/ssh/ssh_host_ed25519_key sshd: no hostkeys available -- exiting. make: [check-config] Error 1 (ignored) 上面三个文件的权限问题, 解决方法: 123chmod 600 /etc/ssh/ssh_host_rsa_key &amp;&amp;chmod 600 /etc/ssh/ssh_host_ecdsa_key &amp;&amp;chmod 600 /etc/ssh/ssh_host_ed25519_key 修改配置文件,允许root登录12sed -i &#x27;/^#PermitRootLogin/s/#PermitRootLogin no/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp;sed -i &#x27;/^#PermitRootLogin/s/#PermitRootLogin yes/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config sshd 开机启动1systemctl enable sshd 还有别忘了关闭 telnet 喔! 12systemctl stop xinetd &amp;&amp;systemctl stop telnet.socket &amp;&amp; ———————————————————— END ————————————————————","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"CentOS7_backup","slug":"CentOS7-backup","date":"2019-07-13T04:20:32.000Z","updated":"2021-04-01T08:28:06.427Z","comments":true,"path":"2019/07/13/CentOS7-backup/","link":"","permalink":"https://tari0510.github.io/2019/07/13/CentOS7-backup/","excerpt":"","text":"参考链接: 左客 rsync增量备份 tar 备份失败一个小坑:我在执行下面命令的时候, 如果我不是在根目录, 会导致备份失败, 不是很懂为什么. 1time tar cvpjf $&#123;BZ2BACKUP&#125; --exclude=/proc --exclude=/lost+found --exclude=/$&#123;BZ2BACKUP&#125; --exclude=/mnt --exclude=/sys --exclude=/media / rsync 三种工作方式 本地文件系统上实现同步。命令行语法格式为上述”Local”段的格式。 本地主机使用远程shell和远程主机通信。命令行语法格式为上述”Access via remote shell”段的格式。 本地主机通过网络套接字连接远程主机上的rsync daemon。命令行语法格式为上述”Access via rsync daemon”段的格式。 相关参数说明: -v：显示rsync过程中详细信息。可以使用\"-vvvv\"获取更详细信息。 -P：显示文件传输的进度信息。(实际上\"-P\"=\"--partial --progress\"，其中的\"--progress\"才是显示进度信息的)。 -n --dry-run ：仅测试传输，而不实际传输。常和\"-vvvv\"配合使用来查看rsync是如何工作的。 -a --archive ：归档模式，表示递归传输并保持文件属性。等同于\"-rtopgDl\"。 -r --recursive：递归到目录中去。 -t --times：保持mtime属性。强烈建议任何时候都加上\"-t\"，否则目标文件mtime会设置为系统时间，导致下次更新 ：检查出mtime不同从而导致增量传输无效。-o --owner：保持owner属性(属主)。 -g --group：保持group属性(属组)。 -p --perms：保持perms属性(权限，不包括特殊权限)。 -D ：是\"--device --specials\"选项的组合，即也拷贝设备文件和特殊文件。 -l --links：如果文件是软链接文件，则拷贝软链接本身而非软链接所指向的对象。 -z ：传输时进行压缩提高效率。 -R --relative：使用相对路径。意味着将命令行中指定的全路径而非路径最尾部的文件名发送给服务端，包括它们的属性。用法见下文示例。 --size-only ：默认算法是检查文件大小和mtime不同的文件，使用此选项将只检查文件大小。 -u --update ：仅在源mtime比目标已存在文件的mtime新时才拷贝。注意，该选项是接收端判断的，不会影响删除行为。 -d --dirs ：以不递归的方式拷贝目录本身。默认递归时，如果源为\"dir1/file1\"，则不会拷贝dir1目录，使用该选项将拷贝dir1但不拷贝file1。 --max-size ：限制rsync传输的最大文件大小。可以使用单位后缀，还可以是一个小数值(例如：\"--max-size=1.5m\") --min-size ：限制rsync传输的最小文件大小。这可以用于禁止传输小文件或那些垃圾文件。 --exclude ：指定排除规则来排除不需要传输的文件。 --delete ：以SRC为主，对DEST进行同步。多则删之，少则补之。注意\"--delete\"是在接收端执行的，所以它是在 ：exclude/include规则生效之后才执行的。 -b --backup ：对目标上已存在的文件做一个备份，备份的文件名后默认使用\"~\"做后缀。 --backup-dir：指定备份文件的保存路径。不指定时默认和待备份文件保存在同一目录下。 -e ：指定所要使用的远程shell程序，默认为ssh。 --port ：连接daemon时使用的端口号，默认为873端口。 --password-file：daemon模式时的密码文件，可以从中读取密码实现非交互式。注意，这不是远程shell认证的密码，而是rsync模块认证的密码。 -W --whole-file：rsync将不再使用增量传输，而是全量传输。在网络带宽高于磁盘带宽时，该选项比增量传输更高效。 --existing ：要求只更新目标端已存在的文件，目标端还不存在的文件不传输。注意，使用相对路径时如果上层目录不存在也不会传输。 --ignore-existing：要求只更新目标端不存在的文件。和\"--existing\"结合使用有特殊功能，见下文示例。 --remove-source-files：要求删除源端已经成功传输的文件。","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"CentOS7","slug":"CentOS7","date":"2019-07-09T14:36:30.000Z","updated":"2021-04-01T08:28:10.371Z","comments":true,"path":"2019/07/09/CentOS7/","link":"","permalink":"https://tari0510.github.io/2019/07/09/CentOS7/","excerpt":"","text":"我使用滴 CentOS 7 版本: CentOS Linux release 7.2.1511 (Core)CentOS 6 和 CentOS 7 在华为平台上的两个主要区别 CentOS6： 支持快照； 采用sysvinit，服务启动稍慢，fstab和nfs挂载容易出现问题。 CentOS7： 不支持快照，需要自己备份； 采用systemed，设计目标是克服sysvinit的缺点。 firewalld &amp;&amp; firewall-cmd新安装好 nginx 的我兴致勃勃的输入我的ip, 结果…. 于是我检查 服务状态, 配置文件 和 日志文件 好像在 Ubuntu 上都是一样呀..然后发现了 CentOS7 的防火墙默认只开启 ssh 服务 1firewall-cmd --list-services 那怎么去开启一个端口呢? 这里用 80 端口举例 1234firewall-cmd --zone=public --add-port=80/tcp --permanent # （--permanent永久生效，没有此参数重启后失效）firewall-cmd --reload # 重新载入firewall-cmd --zone=public --query-port=80/tcp # 查看 80 端口firewall-cmd --zone=public --remove-port=80/tcp --permanent # 关闭 80 端口 然后就可以正常访问 nginx 啦! 于是又想起许多防火墙是通过 iptables 去管理的, 顺便到 Red Hat 官方文档 gup 了一下 发现在 RHEL7 系统中, 系统默认是自带 firewall 的, 并且默认关闭开启80端口 值得一提的是 firewall 调用 iptables 的相关命令. 想要详细了解可以参考 liitdar的博客","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"初识 ansible (三)","slug":"初识-ansible-3","date":"2019-07-08T13:37:12.000Z","updated":"2021-04-01T08:26:50.836Z","comments":true,"path":"2019/07/08/初识-ansible-3/","link":"","permalink":"https://tari0510.github.io/2019/07/08/%E5%88%9D%E8%AF%86-ansible-3/","excerpt":"","text":"模板 templatesJinja2语言 算数运算: //(取整) 建议放在ansible目录下, 创建一个 templates 文件夹 模板文件后缀 .j2 配置文件变量用 {{ }} 括起来 with_items 迭代对迭代项的引用， 固定变量名为 “item”要在 task 中使用 with_items 给定要迭代的元素列表列表格式: 字符串 或 字典 12345678910111213---- hosts: all remote_user: root vars_files: - vars.yml tasks: - name: unarchive unarchive: src=&#123;&#123; ansibleShellRoot &#125;&#125;&#123;&#123; item &#125;&#125; dest=/tmp/ copy=yes with_items: - test1.tar.gz - test2.tar.gz - test3.tar.gz playbook -&gt; template 中的 for 和 if12345678910111213141516171819# for&#123;% for vhost in nginx_vhosts %&#125;&#123;% endraw %&#125;server &#123; listen &#123;&#123; vhost.listen | default(&#39;80 default_server&#39; ) &#125;&#125;;&#125;&#123;% endfor %&#125;# if&#123;% if vhost.server_name is defined %&#125;server_name &#123; &#123;&#123; vhost.server_name &#125;&#125;;&#125;&#123;% endif %&#125;# if&#123;% if vhost.server_name is defined %&#125;root &#123;&#123; vhost.root &#125;&#125;;&#123;% endif %&#125; for 循环举例.conf.j2 文件 1234567&#123;% for p in ports %&#125;server &#123; listen &#123;&#123; p.port &#125;&#125;; servername &#123;&#123; p.name &#125;&#125;; root &#123;&#123; p.rootdir &#125;&#125;&#125;&#123;% endfor %&#125; .yml 文件 123456789101112131415161718192021---- hosts: all remote_user: root vars_files: ports: - web1: port: 81 name: web1.site.com rootdir: /data/web1 - web2: port: 82 name: web2.site.com rootdir: /data/web2 - web3: port: 83 name: web3.site.com rootdir: /data/web3 tasks: - name: copy conf template: src=/path/**.conf.j2 dest=/path/**.conf if 判断举例.conf.j2 文件 1234567891011&#123;% for p in ports %&#125;server &#123; listen &#123;&#123; p.port &#125;&#125;;&#123;% if p.name is defined %&#125; servername &#123;&#123; p.name &#125;&#125;;&#123;% endif %&#125; root &#123;&#123; p.rootdir &#125;&#125;&#125;&#123;% endfor %&#125; .yml 文件 12345678910111213141516171819---- hosts: all remote_user: root vars_files: ports: - web1: port: 81 rootdir: /data/web1 - web2: port: 82 name: web2.site.com rootdir: /data/web2 - web3: port: 83 rootdir: /data/web3 tasks: - name: copy conf template: src=/path/**.conf.j2 dest=/path/**.conf roles 角色roles 使得 playbook 模块化，并且在模块中的 - include roles/path 中的roles为 /etc/ansible/ 路径下的 roles. roles 的目录树结构如下图所示 (其中的main.yml 类似于入口函数, 负责按照一定顺序调用各个模块): 如果上图中的 nginx 角色要调用不同角色的文件, 需要 - include roles/角色/tasks/某某.yml 角色标签roles: { role: nginx, tages:[‘web’, ‘nginx’]}","categories":[],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://tari0510.github.io/tags/ansible/"}]},{"title":"初识 ansible (二)","slug":"初识-ansible-2","date":"2019-07-08T05:42:59.000Z","updated":"2021-04-01T08:26:47.307Z","comments":true,"path":"2019/07/08/初识-ansible-2/","link":"","permalink":"https://tari0510.github.io/2019/07/08/%E5%88%9D%E8%AF%86-ansible-2/","excerpt":"","text":"ansible 常用模块 Command: 在远程主机执行命令, 默认模块, 可忽略 -m 选项ansible all (-m command) -a ‘service nginx restart’此命令不支持 $VARNAME &lt; &gt; | ; &amp; *等, 用 shell 模块实现 Shell: -a 参数尽量放到单引号中!ansible all -m shell -a ‘echo pass | passwd -stdin user’调用bash执行命令 蕾西 cat /tmp/stanley.md | awk -F ‘|’ ‘print $1,$2’ &amp;&gt; /tmp/example.txt这些复杂命令, 即使使用 shell 也可能会失败, 解决办法: 写到脚本时, copy到远程, 执行. 再把需要的结果拉回执行命令的机器 Script: 运行脚本 -a “/PATH/TO/SCRIPT_FILE”ansible all -m script -a shel.sh ansible-vault 加密解密123456789ansible-vault encrypt file.yml ansible-vault decrypt file.yml ansible-vault edit file.yml ansible-vault view file.yml ansible-vault reykey file.yml ansible-console 交互YAML 语法在单一档案中, 可用连续三个连字号(—)区分多个档案. 另外, 还有选择性的连续三个点好(…)用来表示档案结尾风格和python类似一个完整代码功能需最少元素包含 name: task module: arguments (arguments 一般是 key=value)拓展名通常为 yml 或 yaml 模板: - hosts: websrvs remote_user: root tasks: - name: test connection ping: ansible目录下 vars.yml 专用于存放变量 ansible-playbook 运行 playbook 的方式 ansible-playbook &lt;filename.yml&gt; … [options] -check 检查 –list-hosts 列出运行任务的主机 –limit 只针对主机列表中的主机执行 -v 显示过程 -vv -vvv 更详细 一个模块只对应一个内容 如下: task : - name: copy file1 copy: src=file1 dest=/path/ copy: src=file2 dest=/path/ 这样只会 copy file2 顺便记下 backup 参数, backup=yes 会在复制前备份一个, 防止覆盖.备份的文件名是: 文件名_随机数_时间 ignore_errors 即使途中出错也会继续运行: tasks: - name: rum and ignore the result shell: ... ignore_errors: True handlers 与 notify 触发事件 handlers 用于当关注的资源发生变化时, 才会才会采取一定的操作 notify 调用 handler 中定义的操作 handlers 与 tasks 同级, 并且 notify 名字需要与 handlers 中的 name 名字相同 hosts: websrvs remote_user: root tasks: - name: add group nginx user: name=nginx state=present - name: add user nginx user: name=nginx state=present group=nginx - name: install Nginx yum: name=nginx state=present notify: - restart Nginx - check Nginx process handlers: - name: restart Nginx service: name=nginx state=restartd enabled=yes - name: check Nginx process shell: killall -0 nginx tags 标签 可以单独只执行标签多个动作可以公用一个标签 1ansible-playbook -t 标签 文件.yml 变量的使用 ansible setup facts 远程主机的所有变量都可直接调用 ansible all -m setup 查看所有系统自带变量 在 /etc/ansible/hosts 中定义 普通变量: 主机组中主机单独定义, 优先级高于公共变量 如: [websrvs] 192.168.22.33 http_port=81 192.168.22.34 http_port=82 公共(组)变量: 针对主机组中所有主机定义统一变量 如: [websrvs:vars] nodename=www domainname=example.com 通过命令行制定变量, 优先级最高 如: ansible-playbook -e varname=value 在 playbook 中定义 vars:\\- var1:value1 \\- var12:value2 在 role 中定义","categories":[],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://tari0510.github.io/tags/ansible/"}]},{"title":"Motrix + aria2 踩坑","slug":"Motrix+aria2_踩坑","date":"2019-07-07T16:11:33.000Z","updated":"2021-04-01T08:28:49.462Z","comments":true,"path":"2019/07/08/Motrix+aria2_踩坑/","link":"","permalink":"https://tari0510.github.io/2019/07/08/Motrix+aria2_%E8%B8%A9%E5%9D%91/","excerpt":"","text":"案发前: 被 騷亂時節的少女們 的OP 乙女どもよ 吸引想去追番的我, 看着看着突然有两个域名资源加载不出来, 然后想着把这两个域名加入到我的pac中, 然后发现, 我的pac只用链接的,…于是就跑到别人网盘上去下载pac了. 就突然想起网页版网盘还能全速跑的骚操作, 想安装一波…然后就完全忘了看番这件事了….. Motrix(1.4.1) + aria2(1.34.0)突然觉得百度云盘直接用web端会方便很多,于是想尝试着去使用 Motrix + aria2 + BaiduExporter 的组合, 然后就掉坑了…. Motrix 官网下载就好啦!编译安装最新版本滴 aria2解压进入目录编译安装一条龙…(记得切换位root用户,不然安装时有可能提示权限不够)预编译也不需要加其他拓展,默认就OK啦! 1234sudo sutar &amp;&amp; cd &amp;&amp; ./configuremakemake install 配置继续保持root用户, 方便操作配置文件目录任意, 但要保持下面的path都在同一path .session 文件一定要有喔!aria2.conf 的配置可以参考下我滴 12mkdir /path/aria2 &amp;&amp; touch /path/aria2.session &amp;&amp; chmod 777 /path/aria2.sessionvim /path/aria2.conf 配置完成就可以使用啦!(才怪)要么你是root用户, 不然启动 aria2c 一定记得加 sudo!! 我就被坑了…emmm 1234sudo aria2c --conf-path=/path/aria2/aria2.conf# 这个是在后台运行, 还没下载成功之前建议用上面的, 方便查看运行结果sudo aria2c --conf-path=/path/aria2/aria2.conf -D 安装 BaiduExporter(我使用的是0.8.5)记得安装最新版本, 我就因为没安装最新版本, 他原本对 pan.baidu.com 之类的域名是没有授权, 导致aria2访问不到, 哭死…仔细看README.MD的重要性…. 随便找个可以下载百度云的链接打开, 看到 MO.app 在 保存到网盘 下载等按钮附件就知道插件安装成功啦!!(记得在chrome拓展看看有没有报错, 报错要重装喔!) 说说 MO.app 里面 设置 里面主要字段的含义吧! RPC地址使用MO下载: 就是下载按钮的名字啦!后面跟着的内容在README.ME有说, 我的是http://token:(在motrix Preference-&gt;Advanced-&gt;Security-&gt;RPCSecret 里面的内容)@localhost:16800/jsonrpc User-Agent在 Motrix Preference-&gt;Advanced-&gt;Security: Mock User-Agent 选择 du Referer保持默认的 https://pan.baidu.com/disk/home 就好啦! Motrix 的配置更改后记得点 Save &amp; Apply 就好啦!我踩滴坑一107/07 22:22:06 [ERROR] Failed to serialize session to &#x27;/etc/aria2/aria2.session&#x27;. 这个主要是因为我没有用 sudo 运行 aria2c 二123456707/07 23:46:37 [ERROR] CUID#10 - Download aborted. URI=https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;path=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%2F%E5%9B%9E%E9%A1%BE%E8%A7%86%E9%A2%91.mp4Exception: [AbstractCommand.cc:351] errorCode=22 URI=https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;path=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%2F%E5%9B%9E%E9%A1%BE%E8%A7%86%E9%A2%91.mp4 -&gt; [HttpSkipResponseCommand.cc:240] errorCode=22 The response status is not successful. status=40307/07 23:46:37 [NOTICE] Download GID#2384700d4e908591 not complete: /home/tari/Downloads/回顾视频.mp4 这个主要是因为我插件关于百度云盘的域名授权问题, 保持好插件最新版本就好啦!","categories":[],"tags":[{"name":"日常折腾","slug":"日常折腾","permalink":"https://tari0510.github.io/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"}]},{"title":"about ssh","slug":"ssh","date":"2019-07-06T12:44:05.000Z","updated":"2021-04-01T08:29:16.898Z","comments":true,"path":"2019/07/06/ssh/","link":"","permalink":"https://tari0510.github.io/2019/07/06/ssh/","excerpt":"","text":"/etc/hosts.deny 禁用无效原因：编译安装时默认没有加载libwrap库 [转载自 良许Linux] Secure Shell缩写是SSH， 由IETF的网络工作小组（Network Working Group）所制定，SSH是一项创建在应用层和传输层基础上的安全协议，为计算机的shell提供安全的传输和使用环境。下面我们来介绍 SSH 的 7 大用法。 基本用法最简单的用法就是不带参数，仅输入 ssh 再加上主机地址，比如： ssh 192.168.0.116这种形式登陆主机，会默认使用当前用户进行登录。第一次连接的时候，SSH 会确认目标主机的真实性，如果没有问题的话，输入 yes 即可。 如果我们想要以指定用户名来登录主机，有两种方法： a. 使用 -l 选项 1ssh -l alvin 192.168.0.116 b. 使用 user@hostname 格式 1ssh alvin@192.168.0.116 这两种方法，其中第二种尤为常用。 指定端口登录SSH 默认使用的端口号是 22。大多现代的 Linux 系统 22 端口都是开放的。如果你运行 ssh 程序而没有指定端口号，它直接就是通过 22 端口发送请求的。 如果我们不想通过 22 端口登录，那么我们可以使用 -p 选项来指定端口。 1ssh 192.168.0.116 -p 1234 引申话题：如何修改端口号？只需修改 /etc/ssh/ssh_config ，修改如下一行： 1Port 22 对所有数据请求压缩使用 -C 选项，所有通过 SSH 发送或接收的数据将会被压缩，并且任然是加密的。 1ssh -C 192.168.0.116 但是，这个选项在网速不是很快的时候比较有用，而当网速较快的时候，使用压缩反而会降低效率，所以要视情况使用。 打开调试模式因为某些原因，我们想要追踪调试我们建立的 SSH 连接情况。SSH 提供的 -v 选项参数正是为此而设的。其可以看到在哪个环节出了问题。 12345678910111213[Alvin.Alvin-computer] ➤ ssh -v pi@192.168.0.116OpenSSH_7.1p2, OpenSSL 1.0.1g 7 Apr 2014debug1: Reading configuration data /etc/ssh_configdebug1: Connecting to 192.168.0.116 [192.168.0.116] port 22.debug1: Connection established.debug1: key_load_public: No such file or directorydebug1: Enabling compatibility mode for protocol 2.0debug1: Local version string SSH-2.0-OpenSSH_7.1debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4p1 Raspbian-10+deb9u4debug1: match: OpenSSH_7.4p1 Raspbian-10+deb9u4 pat OpenSSH* compat 0x04000000debug1: Authenticating to 192.168.0.116:22 as &#x27;pi&#x27;debug1: SSH2_MSG_KEXINIT sentdebug1: SSH2_MSG_KEXINIT received 绑定源地址如果你的客户端有多于两个以上的 IP 地址，你就不可能分得清楚在使用哪一个 IP 连接到 SSH 服务器。为了解决这种情况，我们可以使用 -b 选项来指定一个IP 地址。这个 IP 将会被使用做建立连接的源地址。 12345678910[Alvin.Alvin-computer] ➤ ssh -b 192.168.0.105 pi@192.168.0.116Linux raspberrypi 4.14.71-v7+ #1145 SMP Fri Sep 21 15:38:35 BST 2018 armv7lThe programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sun Feb 24 08:52:29 2019 from 192.168.0.105 远程执行命令如果我们想在目标主机执行一条命令，我们通常的做法是，先登录到目标主机，执行命令，再退出来。这样做当然是可以，但是比较麻烦。 如果我们仅仅是想远程执行一条命令，可以直接在后面跟上命令就好，如下： 123456[Alvin.Alvin-computer] ➤ ssh pi@192.168.0.116 ls -lDesktopDocumentsDownloadsMagPiMusic 挂载远程文件系统另外一个很赞的基于 SSH 的工具叫 sshfs。 sshfs 可以让你在本地直接挂载远程主机的文件系统。它的使用格式如下： 1sshfs -o idmap=user user@hostname:/home/user ~/Remote 比如： 1sshfs -o idmap=user pi@192.168.0.116:/home/pi ~/Pi 这个命令可以将远程主机 pi 用户的主目录挂载到本地主目录下的 Pi 文件夹。 类似文章良许Linux 排除Linux机器是否被入侵","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"初识 ansible (一)","slug":"初识-ansible-1","date":"2019-07-06T01:03:58.000Z","updated":"2021-04-01T08:26:43.307Z","comments":true,"path":"2019/07/06/初识-ansible-1/","link":"","permalink":"https://tari0510.github.io/2019/07/06/%E5%88%9D%E8%AF%86-ansible-1/","excerpt":"","text":"个人踩滴小坑要注意下下, 一些参数的含义是什么, 好比我调用 script 模块, 想把脚本调用到目标服务器去执行 12- name: backup base system version script: /baseVersionBackup.sh 传入脚本参数1, 2, 3.... “机智” 的我以为这是到对方服务器的根目录执行脚本….emmmmmm** 注意 chdir 是脚本在对方服务器执行的目录, baseVersionBackup.sh 是你本机脚本的位置 ** 123# 正确操作- name: backup base system version script: chdir=/ baseVersionBackup.sh 传入脚本参数1, 2, 3.... ansible: 基于key的验证是一基本要求特性: 模块化 有Paramiko, PyYAML, Jinja2(模块语言)三个关键模块 支持自定义模块 基于python实现 部署简单，基于python和ssh(默认已安装), agentless 安全, 基于OpenSSH 支持playbook编排任务 幂等性: 一个任务执行一遍和执行n遍, 不因重复执行带来意外情况 无需代理不依赖PKI(无需ssl) 可使用任何变成语言写模块 YAML格式，编排任务，支持丰富的数据结构 较强大的多层解决方案 配置文件 /etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性(一般保持默认) 为什么我执行的ansible指令对方就能执行？(tmp执行完会删除) 脚本的临时目录:remote_tmp = ~/.ansible/tmplocal_tmp = ~/.ansible/tmp forks 并发执行 poll_interval 多长时间去拉一次数据 sudo_user 默认用户 ask_sudo_pass 是否询问口令 ask_pass 是否支持口令 host_key_checking 是否检查对应服务器的host_key, 建议取消注释 log_path 日志建议打开 /etc/ansible/hosts 主机清单 分组: [webserver] # 写域名需要借助dns去解析 10.10.0.1[18:20] 10.10.0.92:8080 www[01:100].example.com db-[a:f].example.com ssh基于key验证: ssh-keygen 输入完后加一下秘钥 ssh-copy-id ip地址 Host-pattern: ALL、通配符* 或关系，如: ansible “group1:group2” 或者 ansible “ip1:ip2” 与关系，如: ansible “group1:&amp;group2” 两个组都在的主机 非关系，如: ansible “group1:!group2” 在组1不在组2 综合关系,如: ansible “group1:group2:&amp;group3:!group4” 正则表达式 “~(web|file).*\\.fosu\\.com” /etc/ansible/roles/ 存放角色的目录 程序 /usr/bin/ansible 主程序，临时命令执行工具 –version -m 模块 默认command 例如ping -a 模块参数 -v -vv -vvv –list-hosts 显示主机列表 -k 提示输入ssh连接密码，默认Key验证 -K 提示输入sudo时的口令 -C 检查，并不执行 -T TIMEOUT 默认10s -u 执行远程执行的用户 -b sudo /usr/bin/ansible-doc 查看配置文档，模块功能查看工具 -a 可以列出当前模块列表，很多… -l 比较常用 ansible-doc -l ping -s 片段解释 执行过程: 1.加载自己的配置文件 默认/etc/ansible/ansible.cfg 2.加载自己对应的模块文件,如command 3.通过ansible将模块或命令生成对应的临时py文件并将该文件传输至远程服务器的对应执行用户 $HOME/.ansible/tmp/ansible-tmp-数组/xxx.py文件 4.给文件+x执行 5.执行并返回结果 6.删除临时py文件, sleep 0退出 执行状态: 绿色:执行成功并且不需要做改变的操作 黄色:执行成功并且对目标主机做变更 红色:执行失败 /usr/bin/ansible-galaxy 下载/上传优秀代码或Roles模块的官网平台 /usr/bin/ansible-playbook 定制自动化任务，编排剧本工具/usr/bin/ansible-pull远程执行命令工具 /usr/bin/ansible-valut 文件加密工具 /usr/bin/ansible-console 基于Console界面与用户交互的执行工具 自动化运维应用场景 文件传输 命令执行 应用部署 配置管理 任务流编排 工具： Ansible 适合中小型企业 Puppet 适合大型公司，例如谷歌 相关概念：代码发布机(堡垒机)通常存在发布环境中：负责把在开发完成经测试没问题后发布到生产环境中通常需要2台(主备)","categories":[],"tags":[{"name":"ansible","slug":"ansible","permalink":"https://tari0510.github.io/tags/ansible/"}]},{"title":"MySQL upgrade, from 5.5.* to 5.7.*","slug":"MySQL_upgrade_from_5.5.*_to_5.7.*","date":"2019-07-02T18:16:54.000Z","updated":"2021-04-01T08:28:53.801Z","comments":true,"path":"2019/07/03/MySQL_upgrade_from_5.5.*_to_5.7.*/","link":"","permalink":"https://tari0510.github.io/2019/07/03/MySQL_upgrade_from_5.5.*_to_5.7.*/","excerpt":"","text":"服务器版本 Ubuntu14.04备份(快照)日常忘记密码 -,- (知道密码滴请直接跳至 开始升级至5.7.* )介绍一个简单修改数据库密码的方法 1sudo cat /etc/mysql/debian.cnf 红线选中部分为我本地mysql的用户和密码(password部分每个人不同的喔!)存在mysql的debian-sys-maint用户和密码,那他们是怎么来的呢? 先假科普一波, 正如它的字面意思（Debian System Matainence），Debian系统对MySQL维护用的，你可以理解为通过系统的某个 “非常规” 程序对Mysql进行备份恢复等行为时，该程序所使用的登录Mysql的账户。 使用以上账号密码登录至mysql执行下面三条命令就可以把密码更改为 123456啦! 1234567use mysql;update user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;update user set plugin=&#x27;mysql_native_password&#x27;;flush privileges; 登录验证下即可 1mysql -u root -p 开始升级至5.7.*默认情况下，apt是无法直接升级到mysql5.7的，因此需要额外设置 首先，备份数据，尽管下面的方式不会丢失你的数据，但是为了安全考虑，建议备份。 下载mysql-apt的配置包，并安装 123wget https://dev.mysql.com/get/mysql-apt-config_0.8.1-1_all.debsudo dpkg -i mysql-apt-config_0.8.1-1_all.deb 在安装的过程中，会要求选择mysql版本，选择mysql5.7版本后，点击“OK”。 更新源并安装数据库，在安装过程中，会自动卸载已经安装的老版本数据。 1sudo apt-get update &amp;&amp; sudo apt-get install mysql-server 安装 mysql 后，使用mysql_upgrade升级数据库文件版本(必须是root用户喔!) 1sudo mysql_upgrade -uroot -p 重启mysql,并检查数据是否正常 123sudo service mysql restartmysqlcheck -uroot -p --all-databases 如果一切正常，所有表的检查结果均是ok状态。 同时，也可以进入mysql使用select version()； 来查看mysql-server 版本号。 更新过程中遇到的问题： 在ubuntu 14的版本中，安装了mysql 后，启动时，程序提示 “No directory, logging in with HOME=/”。 具体如下： 12345678root@xxx:/etc/mysql# service mysql restart \\* Stopping MySQL Community Server 5.7.11... \\* MySQL Community Server 5.7.11 is stopped \\* Re-starting MySQL Community Server 5.7.11No directory, logging in with HOME=/.. \\* MySQL Community Server 5.7.11 is started 解决办法： 123sudo service MySQL stopsudo usermod -d /var/lib/mysql/ mysqlsudo service mysql start 更新mysql版本后，所有的配置文件都会被删除，因此需要修改mysql配置说人话就是，远程是访问不到本数据库的 把 /etc/mysql/mysql.conf.d/mysql.cnf 配置文件中#bind-address =127.0.0.1 的注释符号去掉即可","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"PHP upgrade, from 5.5.* to 7.2.*","slug":"PHP_upgrade_from_5.5.*_to_7.2.24","date":"2019-07-02T17:16:24.000Z","updated":"2021-04-01T08:29:05.055Z","comments":true,"path":"2019/07/03/PHP_upgrade_from_5.5.*_to_7.2.24/","link":"","permalink":"https://tari0510.github.io/2019/07/03/PHP_upgrade_from_5.5.*_to_7.2.24/","excerpt":"","text":"服务器版本 CentOS6备份(快照)首先卸载当前版本PHP1sudo yum remove php* 配置yum仓库在CentOS6/7升级PHP至7.* 需要开启Remi和EPEL仓库 123yum install epel-releaserpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 安装PHP7.2需要在yum中指定需要使用的相关仓库 1yum --enablerepo=remi-php72 install php 安装完成后检查 PHP 版本 1php -v 安装相关 PHP 模块1yum --enablerepo=remi-php72 install php-xml php-soap php-xmlrpc php-mbstring php-json php-gd php-mcrypt php-fpm 这里有个小坑,我在安装php-gd的时候会弹出一下错误 123Error: Package: gd-last-2.2.5-5.el6.remi.x86_64 (remi-safe) Requires: libwebp.so.5()(64bit) You could try using --skip-broken to work around the problem 谷歌libwebp.so.5()(64bit)这个依赖项后发现以下两个链接 https://pkgs.org/download/libwebp.so.5()(64bit)https://centos.pkgs.org/6/atomic-x86_64/libwebp-0.4.3-3.el6.art.x86_64.rpm.html 于是顺势找到rpm包链接 http://www6.atomicorp.com/channels/atomic/centos/6/x86_64/RPMS/libwebp-0.4.3-3.el6.art.x86_64.rpm 安装它就好 1rpm -i it 接下来就可以启动php-fpm并设置为开机启动啦! 123sudo service php-fpm startchkconfig php-fpm on 如果需要,也把mysql服务装上,顺便启用它 123yum --enablerepo=remi-php72 install php-mysqlsudo service mysql restart","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"「形容詞」","slug":"「形容詞」","date":"2019-07-02T10:38:27.000Z","updated":"2021-04-01T08:27:03.148Z","comments":true,"path":"2019/07/02/「形容詞」/","link":"","permalink":"https://tari0510.github.io/2019/07/02/%E3%80%8C%E5%BD%A2%E5%AE%B9%E8%A9%9E%E3%80%8D/","excerpt":"","text":"「な形容詞」 「な形容詞」+ な + 名词 ，因此称为「な形容詞」&nbsp; 名词 + の + 名词 にぎやか：热闹的 「い形容詞」特徴：〜い い形容詞 + 名词例：大きい会社 肯定行 否定行 〜います 〜 **い**くないです 寒いです 寒くないです 辛い 暖かい 暑い （食べ）たいです","categories":[],"tags":[{"name":"勉強","slug":"勉強","permalink":"https://tari0510.github.io/tags/%E5%8B%89%E5%BC%B7/"}]},{"title":"vsftpd upgrade, from 2.2.2 to 3.0.3","slug":"vsftpd_upgrade_from_2.2.2_to_3.0.3","date":"2019-07-01T07:33:24.000Z","updated":"2021-04-01T08:29:20.282Z","comments":true,"path":"2019/07/01/vsftpd_upgrade_from_2.2.2_to_3.0.3/","link":"","permalink":"https://tari0510.github.io/2019/07/01/vsftpd_upgrade_from_2.2.2_to_3.0.3/","excerpt":"","text":"记一次vsftpd 升级过程备份(快照)收集系统信息以及原有vsftpd安装版本信息123uname -arpm -qa | grep vsftpdvsftpd -v 卸载原 vsftpd1rpm -e vsftpd-****** GPG签名认证由于没用到公钥,因此跳过下面两条命令 12gpg -import publickeygpg -verify ***.asc(.sig) *** 解压后进行库文件相关设置安装之前,如果系统为64位，需要更改vsf_findlibs.sh文件库中lib 路径改为lib64 1sed -i &#x27;s/lib\\//lib64\\//g&#x27; vsf_findlibs.sh 编译安装由于没有相关依赖,因此不用进行预编译 1make &amp;&amp; make install 配置信息修改因为是升级安装，需要保留原来vsftp的相关配置，接下来需要复制些文件到相应vsftp目录。具体操作如下： 12cp vsftpd.conf /etc #配置主文件 cp RedHat/vsftpd.pam /etc/pam.d/ftp #PAM 认证文件 如果系统为64位，请将/etc/pam.d/ftp /lib目录替换为/lib64 1sed -i &#x27;s/lib\\//lib64\\//g&#x27; /etc/pam.d/ftp 将以下内容写入 /etc/vsftpd.conf 123anonymous_enable=NOlocal_enable=yeswrite_enable=YES 启动 vsftpd 进行测试1vsftpd /etc/vsftpd.conf &amp; 把 vsftpd 加入到开机启动项中将以下内容写入 /etc/rc.d/rc.local_enable 1vsftpd /etc/vsftpd.conf 修改配置文件如下选项，如果没有相关选项和目录需手动添加或创建创建 /usr/share/empty 文件夹并将以下内容写入 /etc/vsftpd.conf 1secure_chroot_dir=/usr/share/empty 注意：如重启后不能启动服务修改 /etc/xinetd.d/vsftpd 文件，把 disable=no 改成 disable=yes 就行了 版本验证1vsftpd -v 参考自: https://blog.csdn.net/dbdeep/article/details/63037691","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"Openssh upgrade, from 7.5 to 8.0p1","slug":"Openssh_upgrade_from_7.5_to_8.0p1","date":"2019-06-30T16:20:55.000Z","updated":"2021-04-01T08:29:01.674Z","comments":true,"path":"2019/07/01/Openssh_upgrade_from_7.5_to_8.0p1/","link":"","permalink":"https://tari0510.github.io/2019/07/01/Openssh_upgrade_from_7.5_to_8.0p1/","excerpt":"","text":"记一次OpenSSH升级过程系统环境: Ubuntu14.04sshd -D先是修改sshd配置允许root登录，但是重启不了 1sudo service ssh restart 查看得知存在 sshd -D 进程并终止它 12ps -ef | grep sshsudo kill ID 最后开启sshd 1sudo /usr/sbin/sshd -D 启动后就可以root登录了emmm…. 好像启动后只能登录一次?那请试试: 1sudo /usr/sbin/sshd -t 好奇的我想知道-D是什么意思…但看了说明也不知道为什么系列。。-D When this option is specified, sshd will not detach and does not become a daemon. This allows easy monitoring of sshd. 会不会和这有关呢? (摘自官网)OpenSSH runs as two processes when connecting to other computers. The first process is a privileged process and controls the issuance of privileges as necessary. The second process communicates with the network. 快照别忘了备份、别忘了备份、别忘了备份… 卸载原本OpenSSH由于我原本是编译安装的，到原本编译安装的目录卸载就可以了 1make uninstall 下载OpenSSH到官网下载就可以了http://www.openssh.com/releasenotes.html SHA1值检验1sha1sum openssh-8.0p1.tar.gz 相关依赖包pam pam-devel zlib zlib-devel openssl-devel 注意下ubuntu下pam是 libpam0g、pam-devel 是 libpam0g-dev编译安装1./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-pam --with-zlib --with-ssl-dir=/usr/local/ssl --with-privsep-path=/var/lib/sshd 1make &amp;&amp; make install 重启服务器，搞定！","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"memo","slug":"memo","date":"2019-06-29T16:17:36.000Z","updated":"2021-04-01T08:28:35.680Z","comments":true,"path":"2019/06/30/memo/","link":"","permalink":"https://tari0510.github.io/2019/06/30/memo/","excerpt":"","text":"记录 linux 一些常见问题一、某端口是否被 Linux 防火墙阻止-L: 查看管理命令子命令:&emsp;-n：以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。&emsp;-v：显示详细信息 1iptables -vnL | grep &#x27;:port&#x27; 二、^字符对上一个命令的文本替换并重新执行命令^before^after^ 三、vim系列 vim 字符串替换 12345678910111213141516171819:s/well/good/ 替换当前行第一个well 为 good:s/well/good/g 替换当前行所有well 为 good:n,$s/well/good/ 替换第 n 行开始到最后一行中每一行的第一个 well 为 good:n,$s/well/good/g 替换第 n 行开始到最后一行中每一行所有 well 为 goodn 为数字，若 n 为 .，表示从当前行开始到最后一行:%s/well/good/ （等同于 :g/well/s//good/） 替换每一行的第一个 well 为 good:%s/well/good/g （等同于 :g/well/s//good/g） 替换每一行中所有 well 为 good特殊符号转义：可以使用#作为分隔符，此时中间出现的 / 不会作为分隔符:s#well/#good/# 替换当前行第一个 well/ 为 good/:%s#/usr/bin#/bin#g 可以把文件中所有路径/usr/bin换成/bin vim 乱码问题其中-b一般是用来查看对应的二进制文件 1vim -b file vim tab 设置为4个空格vimrc文件末尾加上 123set ts=4set expandtabset autoindent vim 多行注释 首先按 esc 进入命令行模式下，按下 Ctrl + v，进入列（也叫区块）模式; 在行首使用上下键选择需要注释的多行; 按下键盘（大写）“I” 键，进入插入模式； 然后输入注释符（“//”、“#”等）; 最后按下 “Esc” 键。 注：在按下esc键后，会稍等一会才会出现注释，不要着急时间很短的~ vim 去掉高亮底色进入命令模式, 输入 1:nohl vim 除了 i o 外的其他插入 I 在光标当前行开始插入 a 在光标后插入 A 在光标当前行末尾插入 O 在光标当前行的上一行插入新行 vim 定位命令 :set nu 显示行号 :set nonu 取消行号 vim 替换和取消命令 r 替换光标所在处的字符 R 从光标所在处开始替换,按Esc键结束 vim 删除命令(一直傻傻的按远远的del键..) x 删除光标所在处命令 nx 删除光标所在处后的n个字符 dG 删除光标所在行到末尾行的所有内容 D 删除光标所在处到行尾的内容 :n,md 删除制定范围的行 vim 常用快捷键 Shift + zz 保存退出, 与 “:wq” 作用相同 V 进入行可视模式 Ctrl + v 进入块可视模式 vim 鼠标右键不能复制粘贴，而是切为可视化模式 全局改变 vim /etc/vimrc 仅改变当前用户 vim ~/.vimrc 注意事项: source 这一行的功能是加载默认配置，一定要先确定该文件路径存在 (根据vim版本确实vim7*,8*)，否则可能会导致 vim 不可用12345source /usr/share/vim/vim81/defaults.vimlet skip_defaults_vim = 1if has(&#x27;mouse&#x27;) set mouse-=aendif 重新打开 vim 就可以正常使用鼠标右键复制粘贴了 转载自: https://xirikm.net/2019/504-1.html 八、linux终端锁屏与解锁ctrl+s 锁屏ctrl+q 解锁 九、Sublime Text 3 垂直选取Shift+鼠标右键 十、MySQL统计所以库数据大小（有点慢喔）12345SELECT TABLE_SCHEMA, concat(TRUNCATE(sum(data_length)/1024/1024,2),&#x27;MB&#x27;) AS data_size,concat(TRUNCATE(sum(index_length)/1024/1024,2),&#x27;MB&#x27;) AS index_sizeFROM information_schema.TABLESGROUP BY TABLE_SCHEMAORDER BY data_length DESC; 十一、用户加组1usermod -aG group user 十二、探测服务是否已经启动, 运行是否正常1killall -0 service 十三、deb 和 rpm 包之间的转换1sudo apt install alien 十四、查看自己的 pts1who am i 十五、创建目录结构12# -v 显示做了什么mkdir -pv path/&#123;dir1, dir2, ...&#125; 十六、查看 nginx 的组和用户并锁定其不能用 ssh 登录12345678# 查看组getent group nginx# 查看用户getent passwd nginx# 查看nginx属于哪个组id nginx# 锁定 nginx 不能登录usermod -s /sbin/nologin nginx 十七、锁定nginx用户不能登录1passwd -l 十八、mysql密码强度设置1234mysql&gt; set global validate_password_policy=0;mysql&gt; set global validate_password_length=1;# 设置 root&#x27;@&#x27;localhost 的密码ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new password&#x27;; 十九、MySQL查看所有连接的客户端ip1234567891011SELECT user, host from mysql.user;# 或者SELECT substring_index(HOST, &#x27;:&#x27;, 1) AS host_name, state, count(*)FROM information_schema. PROCESSLISTGROUP BY state, host_name; 二十、编码转换1234# 在 linux 下打开 windows 的 txt 可能乱码iconv -f GBK -t UTF-8 文件名字# gedit 乱码可尝试gsettings set org.gnome.gedit.preferences.encodings candidate-encodings &quot;[&#x27;GB18030&#x27;, &#x27;UTF-8&#x27;, &#x27;CURRENT&#x27;, &#x27;ISO-8859-15&#x27;, &#x27;UTF-16&#x27;]&quot; 二十一、批量图片大小转换1find ./ -name &#x27;*.jpg&#x27; -exec convert -resize 1100x2200 &#123;&#125; &#123;&#125; \\; 二十一、五 弄一个读取速度很快很快的小硬盘12mkdir -p /mnt/rammount -t tmpfs tmpfs /mnt/ram -o size=8192M 二十二、don’t add command to history (note the leading space)1echo &quot;Am I like a hacker?&quot; 二十三、exit terminal but leave all processes running1disown -a &amp;&amp; exit 二十四、script 回放1234# 开始录像，ctrl+d或者exit结束script -t 2&gt;demo.time -a demo.his# 回放scriptreplay demo.time demo.his 二十五、 搜索历史记录ctrl + r我天，这么好用的命令我居然一直很少用。。。 二十六、 V2ray1234567# 系统时间sudo date -s 2019/10/27 sudo date -s 16:36:10# 或sudo pacman -S openntpdsudo systemctl enable openntpdsudo systemctl start openntpd 二十七、archlinux vmware12# 每次更新完内核都要使用如下命令重新编译内核模块的sudo vmware-modconfig --console --install-all 二十八、linux写入 ntfs 文件需要安装 ntfs-3g 二十九、sudo git 导致root用户和其他用户git配置不一致sudo 也不是乱用的晕。。。 1234567891011*** Please tell me who you are.Run git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot;to set your account&#39;s default identity.Omit --global to set the identity only in this repository.fatal: unable to auto-detect email address (got &#39;root@****.(none)&#39;) 三十、 archlinux 中一个网卡多ip可能会导致不同服务ip冲突导致网速下降123456789# 查看一个网卡是否存在多个ipip addr# 如果存在多个 ip 可能是系统装有多个网络管理造成的, 我是把 dhcpcd 关了 再 配合静态ip就好了systemctl stop dhcpcdsystemctl disable dhcpcd# 然后重启shutdown -r now 三十一、 linux 下 pycharm 用 matplotlib 库中文乱码 及 减号方块问题123# 查看 matplotlib 字体及配置文件目录import matplotlib CONFIG_DIR = print(matplotlib.matplotlib_fname()) 1234567891011121314# https://fontzone.net/download/simhei 下载 simhei 字体# 把字体拷贝到 matplotlib 字体目录# 要注意你新下载字体的用户及用户组的权限和该目录下一致cp DOWNLOAD_DIR/simhei.ttf CONFIG_DIR/fonts/ttf/ vim CONFIG_DIR/matplotlibrc # matplotlib 配置文件目录# 找到相应位置并 修改为下面三项font.family : sans-seriffont.sans-serif : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serifaxes.unicode_minus:False #作用就是解决负号&#x27;-&#x27;显示为方块的问题# 删除原本字体缓存cd ~/.cache/matplotlibrm -rf *.* 12345678# coding: utf-8import matplotlib.pyplot as pltplt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False# 应该就 OK 了","categories":[],"tags":[{"name":"小记","slug":"小记","permalink":"https://tari0510.github.io/tags/%E5%B0%8F%E8%AE%B0/"}]},{"title":"「助詞」","slug":"「助詞」","date":"2019-06-29T08:42:22.000Z","updated":"2021-04-01T08:27:00.024Z","comments":true,"path":"2019/06/29/「助詞」/","link":"","permalink":"https://tari0510.github.io/2019/06/29/%E3%80%8C%E5%8A%A9%E8%A9%9E%E3%80%8D/","excerpt":"","text":"助詞「は」l— 主語は 一个句子只能有一个l— 表示区别对比例：明日は働きません 私は野菜と魚を食べます。肉は食べません [私は]土曜日は友達と食事します。日曜日は働きます 助詞「に」l— 表示動作進行時点 具体时间要放「に」（八時に、午後四時に）〜 ます例：１０時に友達と食事します。 泛指时间不用放「に」（明日）〜 ます 可放可不放「に」月曜日 火曜日 水曜日 木曜日 金曜日 土曜日 日曜日 l— 表示存在位置 重点是 东西或人/动物 存在位置 + に + 东西 + が あります例：机の上にリンゴがあります a：京都に何があります b：古いお寺や神社[など]が あります 存在位置 + に + 人/动物 + が います例：あそこに子供がいます a：部屋に誰がいます b：田中さんがいます 重点是 位置 东西 + は + 存在位置 + に + が あります例：a：トイレはどこにありますか&emsp;&emsp;b：2階にあります/2階です 人/动物 + は + 存在位置 + に + が います例：a：田中さんはどこにいますか&emsp;&emsp;b：＿＿＿＿＿会議室にいます l— 当动作一个人完成不了时动作主 + は + 动作对方 + に +动作对象 + を + 动词例：私は友達に電話を掛けました&emsp;&emsp;[私は]友達にCDを貸しました&emsp;&emsp;私はFAXで会社にレポートを送りました 例：私は母にカードをあげました&emsp;&emsp;私は母にセーターを貰いました 收到&emsp;&emsp;母は私にセーターをくれました 给(我)&emsp;&emsp;× 母は私にセーターをあげました&emsp;&emsp;因为日本人比较谦虚, 给别人的时候要 「上げ」, 就是比较熟的人也是如此, 别人给我时是 「クレ」&emsp;&emsp;例：友達は私の妹に本をくれました&emsp;&emsp;&emsp;&emsp;私は父にネクタイをあげました l— 表示分配時間期間 + に + 次数 例：一週間に２回日本語を勉強しますa：一周間に何回英語を勉強しますかb：4回勉強します。1回に4時間勉強しますa：じゃあ、一週間に１６時間ですね。すごいですね 助詞「で」l— 表示動作進行地点 場所 + で + 動詞 〜 ます在…例：駅の前で会いましょう。 一个人做什么什么一人で 表示交通工具（搭乘～，开～，骑～， 坐～）例：電車で行きます 要搭电车去 l— 用…工具(方法)例：私はFAXで会社にレポートを送りました 助詞「と」l— 和（跟）…例：日曜日、[あなたは]誰と食事しますか。 [私は]高校時代の友達と食事します。 l— 表并列 和 机の上に本とノートがあります 表示桌子上只有书和备忘录 机の上に本やノート[など(等)]があります 表示桌子上有书、备忘录等 助詞「を」 表示动作作用对象(看得见的动作) 対象 + を + 動作例：日本語を勉強します 助詞「が」 対象 + が（表示焦点）+ 状態動詞 例：日本語が分かります&emsp;&emsp;私はお金が全然ありません 時制 - 肯定 否定 現在 〜ます 〜ません 過去 〜ました 〜ませんでした 語気 ませんか要不要 例：一緒に[動詞]ませんか&emsp;&emsp;ええ、[ ]ましょう&emsp;&emsp;すみません、ちょっと… その他 歩いて走路去 总是 いつも 经常 よく 有时候 時々 不常 あまり＿＿ません 完全不 全然＿＿ません 理由原因から、＿＿＿＿＿＿例：お金がありませんから、どこも行きたくないです&emsp;&emsp;日本のアニメが好きですから、日本語を勉強します&emsp;&emsp;a：どうして、昨日、学校へ来ませんですか&emsp;&emsp;b：疲れましたから もう 已经例：もう晩ご飯を食べましたか&emsp;&emsp;はい、もう食べました&emsp;&emsp;いいえ、まだです&emsp;&emsp;20時ですね、もう帰ります&emsp;&emsp;a：もうあの映画を見ましたか&emsp;&emsp;b：いいえ、まだです。明日友達と見ます&emsp;&emsp;a：21時ですよ、帰りませんか&emsp;&emsp;b：そうですね、帰りましょう","categories":[],"tags":[{"name":"勉強","slug":"勉強","permalink":"https://tari0510.github.io/tags/%E5%8B%89%E5%BC%B7/"}]},{"title":"some issue","slug":"some_issue","date":"2019-06-27T07:53:50.000Z","updated":"2021-04-01T08:29:14.032Z","comments":true,"path":"2019/06/27/some_issue/","link":"","permalink":"https://tari0510.github.io/2019/06/27/some_issue/","excerpt":"","text":"官网访问相关检查内外网, vpn情况下的访问情况, 以此来粗略判断是否为waf拦截[案例1]: 官网外网无法访问, 内网可以或vpn可以, 说明网站没有问题, 可以推测下是waf拦截 检查118 119 120的通信情况(ping)[案例2]: 访问网站出现500错误, 通过ping发现120无法通信，也进不了shell， 登陆vsphere发现是集群的共享存储满了 检查 内存, cpu使用情况(top)[案例3]: 官网主页上不去, 登陆118后发现有个程序跑满了cpu, 使用kill命令杀掉相关进程(kill前先确认下进程用途) 检查nginx,php-fpm的运行情况(ps -aux| grep xxx)检查 硬盘使用情况 (df -h或vshpere)查看 nginx, php日志文件尝试对nginx ,php-fpm重启尝试对服务器重启如果xshell 无法连接服务器, 登陆vsphere 检查服务器储存空间是否已满 挂载相关官网上传文件失败, 图片不显示, /wp-content/uploads/无法建立目录等与挂载文件夹(一般是uploads文件夹)下的文件相关的问题检查119的文件挂载是否成功(showmount -e)若没挂载成功, 重启服务器如果要对/wp-content/uploads/的文件进行权限相关的操作,需要在119上进行处理, 118上无法进行 恢复快照相关刚刚快照恢复后, 可能会遇见网站部分功能失效,部分页面无法访问, 可能是文件挂载或数据库连接没有完全恢复, 建议等待30min~1h后再查看网站是否正常, 再进行下一步操作排查问题. 快照恢复和重启对官网访问会造成一定影响, 涉及到这类的操作做好晚上进行","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"Openssh upgrade, from 7.5 to 7.9","slug":"Openssh upgrade, from 7.5 to 7.9","date":"2019-06-24T02:54:44.000Z","updated":"2021-04-01T08:28:58.305Z","comments":true,"path":"2019/06/24/Openssh upgrade, from 7.5 to 7.9/","link":"","permalink":"https://tari0510.github.io/2019/06/24/Openssh%20upgrade,%20from%207.5%20to%207.9/","excerpt":"","text":"记一次OpenSSH升级过程系统环境: Ubuntu14.04 如果服务器并非采用云虚拟平台，最好先启用并测试SSH以外的连接方式（如Telnet）是否能够正常使用，如果SSH安装失败会连不上服务器（别问我怎么知道的…） 删除旧版本的openssh版本文件及旧版本的openssl（1、记得先备份好 2、如果zlib版本适应当前版本OpenSSH，可以不用更新） Wget openssh7.9p1、openssl1.1.1 和 perl5.26安装包 先编译安装perl,记得备份旧的perl，再创造新的软链接Perl -v进行测试 编译安装openssl，openssl version测试不成功到bin目录下./openssl version，报文件加载出错备份并重新创建新的libssl.so.1.1和libcrypto.so.1.1软链接再次bin目录下./openssl version成功备份并创建新的openssl软链接Openssl version进行测试 编译安装openssh 修改ssh配置文件允许root用户登录","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"ゴーストルール","slug":"ゴーストルール","date":"2019-06-24T02:33:33.000Z","updated":"2021-04-01T08:29:37.932Z","comments":true,"path":"2019/06/24/ゴーストルール/","link":"","permalink":"https://tari0510.github.io/2019/06/24/%E3%82%B4%E3%83%BC%E3%82%B9%E3%83%88%E3%83%AB%E3%83%BC%E3%83%AB/","excerpt":"","text":"‘メーデー’の意味この前、ゴーストルールを聴きました、その歌詞の中 ’メーデー’ がありますどういう意味なのか？ その意味について考えがあります。 グーグルで、このような言葉がある：Mayday is an emergency procedure word used internationally as a distress signal in voice-procedure radio communications. 遭難信号のことですか？エエエエエ、、全然分からない 最後にこのリンクを見つけました ゴーストルール歌詞の意味つまり、主人公は遭難していて、だれかに見つけてもらいたいと信号を送っているのです。 そんな遭難信号を送っておきながら、僕は見つけられても抱き締めなくていいと言っています。 一方で、僕に気づいたら笑いかけて欲しいと願っています。 これは、僕が抱きしめることのできない存在だということを言っているのではないでしょうか？","categories":[],"tags":[{"name":"小记","slug":"小记","permalink":"https://tari0510.github.io/tags/%E5%B0%8F%E8%AE%B0/"}]},{"title":"Deploy WordPress, ThinkPHP5 and general system in Nginx","slug":"maintence","date":"2019-06-23T16:01:51.000Z","updated":"2021-04-01T08:28:24.172Z","comments":true,"path":"2019/06/24/maintence/","link":"","permalink":"https://tari0510.github.io/2019/06/24/maintence/","excerpt":"","text":"记一次Nginx上同时部署WordPress、 ThinkPHP5 和 普通系统，其中WordPress使用目录多站点这次系统部署主要遇到以下四个问题，以至于花费比较长的时间，但总的来说还是因为对nginx配置相对不熟练。 wordpress本身路由特点，wordpress在建站时会把网站的根地址存在数据库的wp_options表的siteurl、home、ossdl_off_cdn_url和ossdl_off_blog_url字段中，路由都是从数据库中读取。所以nginx无论怎么修改配置都是测试不了问题的。 wordpress域名多站点与目录多站点存在着不同之处，安装wp目录多站点时，必须要停用所有插件再开启。 wp目录多站点的重写规则，由于wp路由的特殊性，wp在nginx的配置会覆盖其他系统的配置，所以访问uri时必须首先重写其他系统的uri。又由于存在wp，tp5，以及原生系统，三种不同路由的规则，一开始服务器配置又经过许多人手，配置起来比较凌乱。 由于在编译安装nginx时，没有装上echo输出，在我们调试正则表达式规则重写uri时候带来了很多麻烦，需要改不同的正则表达式，然后查看log文件，站点访问情况等摸索它的重写规律。 以下是配置文件内容:RoomReserver 是普通系统，tpmas是ThinkPHP5系统12345678910111213141516171819202122232425#RoomResever rewrite rulerewrite ^&#x2F;RoomReserve&#x2F;(.*)$ &#x2F;RoomReserve&#x2F;$1 break;#tpmas rewrite ruleif ( $request_uri ~* &#x2F;tpmas&#x2F; ) &#123; rewrite ^&#x2F;tpmas&#x2F;public&#x2F;index.php&#x2F;(.*)$ &#x2F;tpmas&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;$1 last; break; #rewrite ^&#x2F;tpmas&#x2F;public&#x2F;index.php&#x2F;(.*)$ &#x2F;tpmas&#x2F;public&#x2F;index.php?s&#x3D;&#x2F;$1 last; break;&#125;#wordpress rewrite rulerewrite ^&#x2F;([_0-9a-zA-Z-]+&#x2F;)?wp-admin$ &#x2F;$1wp-admin&#x2F; permanent;if (-f $request_filename)&#123;set $rule_2 1;&#125;if (-d $request_filename)&#123;set $rule_2 1;&#125;if ($rule_2 &#x3D; &quot;1&quot;)&#123;#ignored: “-” thing used or unknown variable in regex&#x2F;rew&#125;rewrite ^&#x2F;([_0-9a-zA-Z-]+&#x2F;)?(wp-(content|admin|includes).*) &#x2F;$2 last;rewrite ^&#x2F;([_0-9a-zA-Z-]+&#x2F;)?(.*.php)$ &#x2F;$2 last;rewrite &#x2F;. &#x2F;index.php last;","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-06-22T16:23:37.000Z","updated":"2021-04-01T08:25:34.475Z","comments":true,"path":"2019/06/23/hello-world/","link":"","permalink":"https://tari0510.github.io/2019/06/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Wireshark 流量分析","slug":"Wireshark-流量分析","permalink":"https://tari0510.github.io/tags/Wireshark-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"},{"name":"小记","slug":"小记","permalink":"https://tari0510.github.io/tags/%E5%B0%8F%E8%AE%B0/"},{"name":"daily","slug":"daily","permalink":"https://tari0510.github.io/tags/daily/"},{"name":"学校课程","slug":"学校课程","permalink":"https://tari0510.github.io/tags/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"},{"name":"ctf","slug":"ctf","permalink":"https://tari0510.github.io/tags/ctf/"},{"name":"运维","slug":"运维","permalink":"https://tari0510.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"勉強","slug":"勉強","permalink":"https://tari0510.github.io/tags/%E5%8B%89%E5%BC%B7/"},{"name":"ansible","slug":"ansible","permalink":"https://tari0510.github.io/tags/ansible/"},{"name":"日常折腾","slug":"日常折腾","permalink":"https://tari0510.github.io/tags/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"}]}